Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
square_burst,com.squareup.burst,BurstRunner,describeChildPlain,Long Statement,The length of the statement "return Description.createTestDescription(getTestClass().getJavaClass()`method.getMethod().getName()`method.getAnnotations());" is 125.,101
square_burst,com.squareup.burst,BurstJUnit4Test,constructorNone,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.ConstructorNoArgumentTest)"`"FINISH testMethod(com.squareup.burst.ConstructorNoArgumentTest)");" is 179.,11
square_burst,com.squareup.burst,BurstJUnit4Test,constructorSingle,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.ConstructorSingleArgumentTest[PEPSI])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleArgumentTest[PEPSI])"`"START testMethod(com.squareup.burst.ConstructorSingleArgumentTest[COKE])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleArgumentTest[COKE])"`"START testMethod(com.squareup.burst.ConstructorSingleArgumentTest[RC_COLA])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleArgumentTest[RC_COLA])");" is 509.,19
square_burst,com.squareup.burst,BurstJUnit4Test,constructorSingleNamed,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=PEPSI])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=PEPSI])"`"START testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=COKE])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=COKE])"`"START testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=RC_COLA])"`"FINISH testMethod(com.squareup.burst.ConstructorSingleNamedArgumentTest[Drink=RC_COLA])");" is 575.,31
square_burst,com.squareup.burst,BurstJUnit4Test,constructorMultiple,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[PEPSI` CANDY])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[COKE` CANDY])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleArgumentTest[RC_COLA` CANDY])");" is 1587.,43
square_burst,com.squareup.burst,BurstJUnit4Test,constructorMultipleNames,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=PEPSI` CANDY])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=COKE` CANDY])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` CHIPS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` CHIPS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` NUTS])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` NUTS])"`"START testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` CANDY])"`"FINISH testMethod(com.squareup.burst.ConstructorMultipleNamedArgumentTest[Drink=RC_COLA` CANDY])");" is 1785.,67
square_burst,com.squareup.burst,BurstJUnit4Test,method,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START single[PEPSI](com.squareup.burst.MethodTest)"`"FINISH single[PEPSI](com.squareup.burst.MethodTest)"`"START single[COKE](com.squareup.burst.MethodTest)"`"FINISH single[COKE](com.squareup.burst.MethodTest)"`"START single[RC_COLA](com.squareup.burst.MethodTest)"`"FINISH single[RC_COLA](com.squareup.burst.MethodTest)"`"START none(com.squareup.burst.MethodTest)"`"FINISH none(com.squareup.burst.MethodTest)"`"START multiple[PEPSI` CHIPS](com.squareup.burst.MethodTest)"`"FINISH multiple[PEPSI` CHIPS](com.squareup.burst.MethodTest)"`"START multiple[PEPSI` NUTS](com.squareup.burst.MethodTest)"`"FINISH multiple[PEPSI` NUTS](com.squareup.burst.MethodTest)"`"START multiple[PEPSI` CANDY](com.squareup.burst.MethodTest)"`"FINISH multiple[PEPSI` CANDY](com.squareup.burst.MethodTest)"`"START multiple[COKE` CHIPS](com.squareup.burst.MethodTest)"`"FINISH multiple[COKE` CHIPS](com.squareup.burst.MethodTest)"`"START multiple[COKE` NUTS](com.squareup.burst.MethodTest)"`"FINISH multiple[COKE` NUTS](com.squareup.burst.MethodTest)"`"START multiple[COKE` CANDY](com.squareup.burst.MethodTest)"`"FINISH multiple[COKE` CANDY](com.squareup.burst.MethodTest)"`"START multiple[RC_COLA` CHIPS](com.squareup.burst.MethodTest)"`"FINISH multiple[RC_COLA` CHIPS](com.squareup.burst.MethodTest)"`"START multiple[RC_COLA` NUTS](com.squareup.burst.MethodTest)"`"FINISH multiple[RC_COLA` NUTS](com.squareup.burst.MethodTest)"`"START multiple[RC_COLA` CANDY](com.squareup.burst.MethodTest)"`"FINISH multiple[RC_COLA` CANDY](com.squareup.burst.MethodTest)");" is 1585.,91
square_burst,com.squareup.burst,BurstJUnit4Test,namedMethod,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START single[Drink=PEPSI](com.squareup.burst.NamedMethodTest)"`"FINISH single[Drink=PEPSI](com.squareup.burst.NamedMethodTest)"`"START single[Drink=COKE](com.squareup.burst.NamedMethodTest)"`"FINISH single[Drink=COKE](com.squareup.burst.NamedMethodTest)"`"START single[Drink=RC_COLA](com.squareup.burst.NamedMethodTest)"`"FINISH single[Drink=RC_COLA](com.squareup.burst.NamedMethodTest)"`"START none(com.squareup.burst.NamedMethodTest)"`"FINISH none(com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=PEPSI` CHIPS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=PEPSI` CHIPS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=PEPSI` NUTS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=PEPSI` NUTS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=PEPSI` CANDY](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=PEPSI` CANDY](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=COKE` CHIPS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=COKE` CHIPS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=COKE` NUTS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=COKE` NUTS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=COKE` CANDY](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=COKE` CANDY](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=RC_COLA` CHIPS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=RC_COLA` CHIPS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=RC_COLA` NUTS](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=RC_COLA` NUTS](com.squareup.burst.NamedMethodTest)"`"START multiple[Drink=RC_COLA` CANDY](com.squareup.burst.NamedMethodTest)"`"FINISH multiple[Drink=RC_COLA` CANDY](com.squareup.burst.NamedMethodTest)");" is 1859.,123
square_burst,com.squareup.burst,BurstJUnit4Test,constructorAndMethod,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"FINISH single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"START single[NUTS](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"FINISH single[NUTS](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"START single[CANDY](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"FINISH single[CANDY](com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"START none(com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"FINISH none(com.squareup.burst.ConstructorAndMethodTest[PEPSI])"`"START single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"FINISH single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"START single[NUTS](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"FINISH single[NUTS](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"START single[CANDY](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"FINISH single[CANDY](com.squareup.burst.ConstructorAndMethodTest[COKE])"`"START none(com.squareup.burst.ConstructorAndMethodTest[COKE])"`"FINISH none(com.squareup.burst.ConstructorAndMethodTest[COKE])"`"START single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"FINISH single[CHIPS](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"START single[NUTS](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"FINISH single[NUTS](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"START single[CANDY](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"FINISH single[CANDY](com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"START none(com.squareup.burst.ConstructorAndMethodTest[RC_COLA])"`"FINISH none(com.squareup.burst.ConstructorAndMethodTest[RC_COLA])");" is 1784.,155
square_burst,com.squareup.burst,BurstJUnit4Test,singleField,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.SingleFieldTest[PEPSI])"`"FINISH testMethod(com.squareup.burst.SingleFieldTest[PEPSI])"`"START testMethod(com.squareup.burst.SingleFieldTest[COKE])"`"FINISH testMethod(com.squareup.burst.SingleFieldTest[COKE])"`"START testMethod(com.squareup.burst.SingleFieldTest[RC_COLA])"`"FINISH testMethod(com.squareup.burst.SingleFieldTest[RC_COLA])");" is 425.,185
square_burst,com.squareup.burst,BurstJUnit4Test,multipleFields,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` CHIPS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` NUTS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[PEPSI` CANDY])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[COKE` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[COKE` CHIPS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[COKE` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[COKE` NUTS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[COKE` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[COKE` CANDY])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` CHIPS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` NUTS])"`"START testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleFieldsTest[RC_COLA` CANDY])");" is 1353.,197
square_burst,com.squareup.burst,BurstJUnit4Test,multipleNamedFields,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` CHIPS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` NUTS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=PEPSI` CANDY])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` CHIPS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` NUTS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=COKE` CANDY])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` CHIPS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` CHIPS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` NUTS])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` NUTS])"`"START testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` CANDY])"`"FINISH testMethod(com.squareup.burst.MultipleNamedFieldsTest[Drink=RC_COLA` CANDY])");" is 1551.,221
square_burst,com.squareup.burst,BurstJUnit4Test,fieldAndMethod,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"FINISH testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"START testMethod[COKE](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"FINISH testMethod[COKE](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"START testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"FINISH testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[CHIPS])"`"START testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[NUTS])"`"FINISH testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[NUTS])"`"START testMethod[COKE](com.squareup.burst.FieldAndMethodTest[NUTS])"`"FINISH testMethod[COKE](com.squareup.burst.FieldAndMethodTest[NUTS])"`"START testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[NUTS])"`"FINISH testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[NUTS])"`"START testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[CANDY])"`"FINISH testMethod[PEPSI](com.squareup.burst.FieldAndMethodTest[CANDY])"`"START testMethod[COKE](com.squareup.burst.FieldAndMethodTest[CANDY])"`"FINISH testMethod[COKE](com.squareup.burst.FieldAndMethodTest[CANDY])"`"START testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[CANDY])"`"FINISH testMethod[RC_COLA](com.squareup.burst.FieldAndMethodTest[CANDY])");" is 1353.,245
square_burst,com.squareup.burst,BurstJUnit4Test,namedFieldAndNamedMethod,Long Statement,The length of the statement "assertThat(listener.journal()).containsExactly("START testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"FINISH testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"START testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"FINISH testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"START testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"FINISH testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CHIPS])"`"START testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"FINISH testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"START testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"FINISH testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"START testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"FINISH testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=NUTS])"`"START testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])"`"FINISH testMethod[Drink=PEPSI](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])"`"START testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])"`"FINISH testMethod[Drink=COKE](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])"`"START testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])"`"FINISH testMethod[Drink=RC_COLA](com.squareup.burst.NamedFieldAndNamedMethodTest[Food=CANDY])");" is 1731.,269
square_burst,com.squareup.burst,RuleUsingAnnotationsTest,shouldDetectAnnotationsOnATest,Magic Number,The method contains a magic number: 2,39
square_burst,com.squareup.burst,Burst,explodeArguments,Long Statement,The length of the statement "return explodeParameters(method.getParameterTypes()`method.getDeclaringClass().getName() + '.' + method.getName()+ " method");" is 126.,28
square_burst,com.squareup.burst,Burst,explodeParameters,Long Statement,The length of the statement "throw new IllegalStateException(name + " parameter #" + (i + 1)+ " type is not an enum. ("+ parameterType.getName()+ ')');" is 122.,99
square_burst,com.squareup.burst,TestConstructor,newInstance,Long Statement,The length of the statement "throw new IllegalArgumentException(String.format("Constructor takes %d values` only %d passed"`getVariationTypes().length`args.length));" is 136.,54
square_burst,com.squareup.burst,TestConstructor,initializeFieldsOnInstance,Long Statement,The length of the statement "throw new IllegalArgumentException(String.format("Requires values for %d fields` only %d values passed"`fields.length`args.length));" is 132.,101
square_burst,com.squareup.burst,BurstableConstructor,findSingle,Long Statement,The length of the statement "throw new IllegalStateException("Class " + cls.getName() + " has too many parameterized constructors. "+ "Should only be 1 (with enum variations).");" is 149.,14
square_burst,com.squareup.burst,BurstableConstructor,findAll,Long Statement,The length of the statement "throw new IllegalStateException("Class " + cls.getName() + " has a parameterized constructor` so cannot also be parameterized on fields");" is 138.,35
square_burst,com.squareup.burst,BurstTest,multipleConstructorParameters,Long Statement,The length of the statement "assertThat(objects).containsExactly(new Object[]{First.APPLE`Second.DINGO`Third.FRANK}`new Object[]{First.APPLE`Second.DINGO`Third.GREAT}`new Object[]{First.APPLE`Second.DINGO`Third.HEAVY}`new Object[]{First.APPLE`Second.DINGO`Third.ITALY}`new Object[]{First.APPLE`Second.EAGLE`Third.FRANK}`new Object[]{First.APPLE`Second.EAGLE`Third.GREAT}`new Object[]{First.APPLE`Second.EAGLE`Third.HEAVY}`new Object[]{First.APPLE`Second.EAGLE`Third.ITALY}`new Object[]{First.BEARD`Second.DINGO`Third.FRANK}`new Object[]{First.BEARD`Second.DINGO`Third.GREAT}`new Object[]{First.BEARD`Second.DINGO`Third.HEAVY}`new Object[]{First.BEARD`Second.DINGO`Third.ITALY}`new Object[]{First.BEARD`Second.EAGLE`Third.FRANK}`new Object[]{First.BEARD`Second.EAGLE`Third.GREAT}`new Object[]{First.BEARD`Second.EAGLE`Third.HEAVY}`new Object[]{First.BEARD`Second.EAGLE`Third.ITALY}`new Object[]{First.COUCH`Second.DINGO`Third.FRANK}`new Object[]{First.COUCH`Second.DINGO`Third.GREAT}`new Object[]{First.COUCH`Second.DINGO`Third.HEAVY}`new Object[]{First.COUCH`Second.DINGO`Third.ITALY}`new Object[]{First.COUCH`Second.EAGLE`Third.FRANK}`new Object[]{First.COUCH`Second.EAGLE`Third.GREAT}`new Object[]{First.COUCH`Second.EAGLE`Third.HEAVY}`new Object[]{First.COUCH`Second.EAGLE`Third.ITALY});" is 1261.,51
square_burst,com.squareup.burst,BurstTest,multipleMethodParameters,Long Statement,The length of the statement "assertThat(objects).containsExactly(new Object[]{First.APPLE`Second.DINGO`Third.FRANK}`new Object[]{First.APPLE`Second.DINGO`Third.GREAT}`new Object[]{First.APPLE`Second.DINGO`Third.HEAVY}`new Object[]{First.APPLE`Second.DINGO`Third.ITALY}`new Object[]{First.APPLE`Second.EAGLE`Third.FRANK}`new Object[]{First.APPLE`Second.EAGLE`Third.GREAT}`new Object[]{First.APPLE`Second.EAGLE`Third.HEAVY}`new Object[]{First.APPLE`Second.EAGLE`Third.ITALY}`new Object[]{First.BEARD`Second.DINGO`Third.FRANK}`new Object[]{First.BEARD`Second.DINGO`Third.GREAT}`new Object[]{First.BEARD`Second.DINGO`Third.HEAVY}`new Object[]{First.BEARD`Second.DINGO`Third.ITALY}`new Object[]{First.BEARD`Second.EAGLE`Third.FRANK}`new Object[]{First.BEARD`Second.EAGLE`Third.GREAT}`new Object[]{First.BEARD`Second.EAGLE`Third.HEAVY}`new Object[]{First.BEARD`Second.EAGLE`Third.ITALY}`new Object[]{First.COUCH`Second.DINGO`Third.FRANK}`new Object[]{First.COUCH`Second.DINGO`Third.GREAT}`new Object[]{First.COUCH`Second.DINGO`Third.HEAVY}`new Object[]{First.COUCH`Second.DINGO`Third.ITALY}`new Object[]{First.COUCH`Second.EAGLE`Third.FRANK}`new Object[]{First.COUCH`Second.EAGLE`Third.GREAT}`new Object[]{First.COUCH`Second.EAGLE`Third.HEAVY}`new Object[]{First.COUCH`Second.EAGLE`Third.ITALY});" is 1261.,119
square_burst,com.squareup.burst,BurstTest,multipleArguments_named,Long Statement,The length of the statement "String actual=Burst.friendlyName(new Enum<?>[]{First.APPLE`Second.EAGLE`Third.ITALY}`new Annotation[][]{{TestUtil.createName("Fruit")}`{TestUtil.createName("Bird")}`{TestUtil.createName("Country")}});" is 200.,176
square_burst,com.squareup.burst,BurstTest,multipleArguments_multipleAnnotations_named,Long Statement,The length of the statement "String actual=Burst.friendlyName(new Enum<?>[]{First.APPLE`Second.EAGLE`Third.ITALY}`new Annotation[][]{{TestUtil.createFake()`TestUtil.createName("Fruit")}`{TestUtil.createFake()`TestUtil.createName("Bird")}`{TestUtil.createName("Country")`TestUtil.createFake()}});" is 266.,185
