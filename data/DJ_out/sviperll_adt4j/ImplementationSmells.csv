Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
sviperll_adt4j,com.github.sviperll.adt4j,GenerateValueClassForVisitorProcessor,process,Long Statement,The length of the statement "String message="Unexpected exception." + " This seems like a bug in ADT4J`" + " please report it at https://github.com/sviperll/adt4j/issues"+ " with the following details:\n"+ Throwables.render(ex);" is 199.,105
sviperll_adt4j,com.github.sviperll.adt4j,MainTest,testVisitor,Long Statement,The length of the statement "User<String> user=User.<String>valueOf(UserKey.valueOf(1)`ComparableList.<String>empty()`"Victor"`GroupName.valueOf("group1"));" is 127.,54
sviperll_adt4j,com.github.sviperll.adt4j,MainTest,testGetters,Long Statement,The length of the statement "User<String> user=User.<String>valueOf(UserKey.valueOf(1)`ComparableList.<String>empty()`"Victor"`GroupName.valueOf("group1"));" is 127.,71
sviperll_adt4j,com.github.sviperll.adt4j,MainTest,testUpdater,Long Statement,The length of the statement "User<String> user=User.<String>valueOf(UserKey.valueOf(1)`ComparableList.<String>empty()`"Victor"`GroupName.valueOf("group1"));" is 127.,79
sviperll_adt4j,com.github.sviperll.adt4j,MainTest,testEquals,Long Statement,The length of the statement "User<String> user=User.<String>valueOf(UserKey.valueOf(1)`ComparableList.<String>empty()`"Victor"`GroupName.valueOf("group1"));" is 127.,93
sviperll_adt4j,com.github.sviperll.adt4j,MainTest,testEquals,Long Statement,The length of the statement "User<String> user1=User.<String>valueOf(UserKey.valueOf(1)`ComparableList.<String>empty()`"Victor"`GroupName.valueOf("group1"));" is 128.,93
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModel,createStage1Model,Long Statement,The length of the statement "if (annotation == null) throw new IllegalStateException("ValueClassModelFactory can't be run for interface without " + GenerateValueClassForVisitor.class + " annotation");" is 171.,61
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModel,createStage1Model,Long Statement,The length of the statement "VisitorDefinition visitorModel=generation.processGenerationResult(VisitorDefinition.createInstance(jVisitorModel`visitorAnnotation));" is 133.,61
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModel,createStage1Model,Long Statement,The length of the statement "ValueClassConfiguration configuration=generation.processGenerationResult(ValueClassConfiguration.createInstance(visitorModel`annotation`valueClass));" is 149.,61
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,createResult,Complex Method,Cyclomatic complexity of the method is 8,67
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,createResult,Long Statement,The length of the statement "Map<String`FieldConfiguration> gettersConfigutation=generation.processGenerationResult(configuration.getGettersConfigutation(valueClass`types));" is 144.,67
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,createResult,Long Statement,The length of the statement "Map<String`FieldConfiguration> updatersConfiguration=generation.processGenerationResult(configuration.getUpdatersConfiguration(valueClass`types));" is 146.,67
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,createResult,Long Statement,The length of the statement "FinalValueClassModelEnvironment environment=new FinalValueClassModelEnvironment(valueClass`acceptingInterface`configuration);" is 125.,67
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Complex Conditional,The conditional expression !type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isSerializable(type) is complex.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Complex Conditional,The conditional expression !type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isSerializable(type) is complex.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Complex Conditional,The conditional expression !type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isComparable(type) is complex.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Complex Conditional,The conditional expression !type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isComparable(type) is complex.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Complex Method,Cyclomatic complexity of the method is 13,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Long Statement,The length of the statement "if (!type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isSerializable(type)) generation.reportError("Value class can't be serializable: " + param.name() + " parameter in "+ interfaceMethod.name()+ " method is not serializable");" is 267.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Long Statement,The length of the statement "if (!type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isSerializable(type)) generation.reportError("Value class can't be serializable: " + param.name() + " parameter in "+ interfaceMethod.name()+ " method is not serializable");" is 267.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Long Statement,The length of the statement "if (!type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isComparable(type)) generation.reportError("Value class can't be comparable: " + param.name() + " parameter in "+ interfaceMethod.name()+ " method is not comparable");" is 261.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,validateInterfaces,Long Statement,The length of the statement "if (!type.isError() && !configuration.visitorDefinition().isSelfTypeParameter(type) && !types.isComparable(type)) generation.reportError("Value class can't be comparable: " + param.name() + " parameter in "+ interfaceMethod.name()+ " method is not comparable");" is 261.,124
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,fullySpecifyClassHeader,Long Statement,The length of the statement "valueClass._extends(extendsClass.typeParams().length == 0 ? extendsClass : extendsClass.narrow(valueClass.typeParams()));" is 121.,160
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,fullySpecifyClassHeader,Long Statement,The length of the statement "valueClass._implements(types._Comparable.narrow(Source.narrowType(configuration.wrapValueClass(valueClass)`valueClass.typeParams())));" is 134.,160
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage1ValueClassModel,createAcceptingInterface,Long Statement,The length of the statement "VisitorDefinition.VisitorUsage usedVisitorType=configuration.visitorDefinition().narrowed(usedValueClassType`resultType`exceptionType);" is 135.,178
sviperll_adt4j,com.github.sviperll.adt4j.model,EqualsMethod,appendNonnullPrimitive,Long Statement,The length of the statement "IJExpression epsilon=type.name().equals("float") ? JExpr.lit(floatCustomization.floatEpsilon()) : JExpr.lit(floatCustomization.doubleEpsilon());" is 144.,105
sviperll_adt4j,com.github.sviperll.adt4j.model,EqualsMethod,appendNonnullArray,Long Statement,The length of the statement "if (type.elementType().isReference()) forBody.appendNullableValue(type.elementType()`value1.component(i)`value2.component(i));" is 126.,126
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildSerialVersionUID,Long Statement,The length of the statement "if (environment.isValueClassSerializable()) environment.buildValueClassField(JMod.PRIVATE | JMod.FINAL | JMod.STATIC`types._long`"serialVersionUID"`JExpr.lit(environment.serialVersionUIDForGeneratedCode()));" is 207.,113
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildAcceptorField,Long Statement,The length of the statement "return environment.buildValueClassField(JMod.PRIVATE | JMod.FINAL`environment.acceptingInterfaceTypeInsideValueClass()`"acceptor");" is 131.,118
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildFactory,Long Statement,The length of the statement "JMethod factoryMethod=environment.buildValueClassMethod(Source.toJMod(environment.factoryMethodAccessLevel()) | JMod.STATIC`"factory");" is 135.,122
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildFactoryClass,Long Statement,The length of the statement "JDefinedClass factoryClass=environment.buildValueClassInnerClass(JMod.PRIVATE | JMod.STATIC`environment.valueClassName() + "Factory"`EClassType.CLASS);" is 151.,146
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildFactoryClass,Long Statement,The length of the statement "VisitorDefinition.VisitorUsage usedVisitor=environment.visitor(usedValueClassType`usedValueClassType`types._RuntimeException);" is 126.,146
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildFactoryClass,Long Statement,The length of the statement "JMethod factoryMethod=factoryClass.method(interfaceMethod.mods().getValue() & ~JMod.ABSTRACT`usedValueClassType`interfaceMethod.name());" is 136.,146
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildFactoryClass,Long Statement,The length of the statement "JInvocation staticInvoke=environment.invokeValueClassStaticMethod(constructorMethod`typeArguments.toArray(new AbstractJClass[typeArguments.size()]));" is 149.,146
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildCaseClass,Complex Method,Cyclomatic complexity of the method is 10,193
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildCaseClass,Long Statement,The length of the statement "JDefinedClass caseClass=environment.buildValueClassInnerClass(JMod.PRIVATE | JMod.STATIC`Source.capitalize(interfaceMethodName) + "Case" + environment.acceptingInterfaceName()`EClassType.CLASS);" is 194.,193
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildCaseClass,Long Statement,The length of the statement "VisitorDefinition.VisitorUsage usedVisitor=environment.visitor(usedValueClassType`usedValueClassType`types._RuntimeException);" is 126.,193
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildCaseClass,Long Statement,The length of the statement "if (interfaceMethod == null) throw new IllegalStateException("Method with given name not found: " + interfaceMethodName);" is 121.,193
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildCaseClass,Long Statement,The length of the statement "caseClass.field(JMod.PRIVATE | JMod.FINAL | JMod.STATIC`types._long`"serialVersionUID"`JExpr.lit(serialization.serialVersionUIDForGeneratedCode()));" is 148.,193
sviperll_adt4j,com.github.sviperll.adt4j.model,FinalValueClassModel,buildHashCodeCachedValueField,Long Statement,The length of the statement "if (!environment.hashCodeCaching().enabled()) throw new IllegalStateException("Unsupported method evaluation to cache hash code: " + environment.hashCodeCaching());" is 164.,281
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModelFactory,createStage0Model,Long Statement,The length of the statement "if (annotation == null) throw new IllegalStateException("ValueClassModelFactory can't be run for interface without " + GenerateValueClassForVisitor.class + " annotation");" is 171.,63
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModelFactory,createStage0Model,Long Statement,The length of the statement "VisitorDefinition visitorModel=generation.processGenerationResult(VisitorDefinition.createInstance(bootModel`visitorAnnotation));" is 129.,63
sviperll_adt4j,com.github.sviperll.adt4j.model,Stage0ValueClassModelFactory,createStage0Model,Long Statement,The length of the statement "ValueClassConfiguration configuration=generation.processGenerationResult(ValueClassConfiguration.createInstance(visitorModel`annotation));" is 138.,63
sviperll_adt4j,com.github.sviperll.adt4j.model.config,PredicateConfigutation,put,Long Statement,The length of the statement "if (this.accessLevel != accessLevel) throw new PredicateConfigurationException("Conflicting access level for predicate");" is 121.,49
sviperll_adt4j,com.github.sviperll.adt4j.model.config,PredicatesReader,read,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Unable to generate {0} predicate: inconsistent access levels: {1}"`predicateName`ex.getMessage()));" is 144.,55
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createInstance,Complex Method,Cyclomatic complexity of the method is 8,61
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createInstance,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Result type-variable is not found for visitor` expecting: {0}"`annotation.resultVariableName()));" is 142.,61
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createInstance,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Exception type-variable is not found for visitor` expecting: {0}"`annotation.exceptionVariableName()));" is 148.,61
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createInstance,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Self reference type-variable is not found for visitor` expecting: {0}"`annotation.selfReferenceVariableName()));" is 157.,61
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createInstance,Long Statement,The length of the statement "return generation.createGenerationResult(new VisitorDefinition(jVisitorModel`methods`specialTypeVariables`valueClassTypeParameters));" is 133.,61
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Complex Method,Cyclomatic complexity of the method is 16,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "if (methodType == null) generation.reportError(MessageFormat.format("Visitor method result type is missing: {0}"`method.name()));" is 129.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Visitor method is only allowed to return type declared as a result type of visitor: {0}: expecting {1}` found: {2}"`method.name()`specialTypeVariables.resultTypeParameter().name()`methodType.fullName()));" is 249.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Visitor method type-parameters shouldn''t depend on result type: {0}: {1} type-variable"`method.name()`typeVariable.name()));" is 170.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Visitor method shouldn''t have result type as a parameter: {0}: result type-parameter: {1}"`method.name()`specialTypeVariables.resultTypeParameter().name()));" is 203.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "if (exceptions.size() > 1) generation.reportError(MessageFormat.format("Visitor method is allowed to throw no exceptions or throw single exception` declared as type-variable: {0}"`method.name()));" is 196.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "if (exception.isError()) generation.reportError(MessageFormat.format("Visitor method exception type is erroneous: {0}"`method.name()));" is 135.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "else if (!specialTypeVariables.isException(exception)) generation.reportError(MessageFormat.format("Visitor method throws exception` not declared as type-variable: {0}: {1}"`method.name()`exception.fullName()));" is 211.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,VisitorDefinition,createMethodMap,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Method overloading is not supported for visitor interfaces: two methods with the same name: {0}"`method.name()));" is 158.,95
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,createInstance,Long Statement,The length of the statement "ClassCustomization classCustomization=generation.processGenerationResult(classCustomization(annotation`visitorDefinition`valueClass));" is 134.,64
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,createInstance,Long Statement,The length of the statement "ImplementationCustomization implementationCustomization=new ImplementationCustomization(hashCodeCaching`hashCodeBase`floatCustomization);" is 137.,64
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Complex Conditional,The conditional expression visitor == null || visitor.fullName() == null || !visitor.fullName().equals(visitorDefinition.qualifiedName()) is complex.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Complex Method,Cyclomatic complexity of the method is 22,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "if (wrapsGeneratedAnnotation == null) generation.reportError(MessageFormat.format("Wrapper class should be annotated with @{0} annotation."`com.github.sviperll.adt4j.WrapsGeneratedValueClass.class.getName()));" is 209.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "if (visitor == null || visitor.fullName() == null || !visitor.fullName().equals(visitorDefinition.qualifiedName())) generation.reportError("@" + WrapsGeneratedValueClass.class.getName() + " annotation should have "+ visitorDefinition.qualifiedName()+ " as visitor argument");" is 275.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "generation.reportError("You shouldn't define className when wrapperClass is used. Generated class name is derived from wrapper class' extends clause.");" is 152.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "if (valueClassFullName == null || !valueClassFullName.equals(extendedClass.erasure().fullName())) extendedClassError=true;" is 122.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "if (wrapperTypeParameters.length != typeArguments.size() || wrapperTypeParameters.length != generatedTypeParameters.size()) typeParamsError=true;" is 145.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,classCustomization,Long Statement,The length of the statement "generation.reportError("Wrapper class should declare same type-parameters as generated class and should extend generated class with all type-arguments applied");" is 161.,88
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,autoClassName,Long Statement,The length of the statement "if (visitorName.endsWith(VISITOR_SUFFIX)) return visitorName.substring(0`visitorName.length() - VISITOR_SUFFIX.length());" is 121.,181
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,getGettersConfigutation,Long Statement,The length of the statement "VisitorDefinition.VisitorUsage narrowed=visitorDefinition.narrowed(usedValueClassType`visitorDefinition.getResultTypeParameter()`types._RuntimeException);" is 154.,256
sviperll_adt4j,com.github.sviperll.adt4j.model.config,ValueClassConfiguration,getUpdatersConfiguration,Long Statement,The length of the statement "VisitorDefinition.VisitorUsage narrowed=visitorDefinition.narrowed(usedValueClassType`visitorDefinition.getResultTypeParameter()`types._RuntimeException);" is 154.,274
sviperll_adt4j,com.github.sviperll.adt4j.model.config,FieldReader,read,Long Statement,The length of the statement "generation.reportError(MessageFormat.format("Unable to configure {0} getter: {1}"`configuration.name()`ex.getMessage()));" is 121.,98
sviperll_adt4j,com.github.sviperll.adt4j.model.config,Serialization,Serialization,Long Identifier,The length of the field serialVersionUIDForGeneratedCode is 32.,48
sviperll_adt4j,com.github.sviperll.adt4j.model.config,Serialization,serialVersionUIDForGeneratedCode,Long Identifier,The length of the field serialVersionUIDForGeneratedCode is 32.,57
sviperll_adt4j,com.github.sviperll.adt4j.model.config,FieldConfiguration,merge,Long Statement,The length of the statement "if (!this.type.equals(that.type)) throw new FieldConfigurationException(MessageFormat.format("Unable to config {0} field: inconsitent field types"`name));" is 154.,56
sviperll_adt4j,com.github.sviperll.adt4j.model.config,FieldConfiguration,merge,Long Statement,The length of the statement "if (oldField != null) throw new FieldConfigurationException(MessageFormat.format("Unable to config {0} field: both {1} and {2} parameters of {3} are referenced as the single {4} field"`name`oldField`paramName`method.name()`name));" is 230.,56
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,toJMod,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@15682f4a,57
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,capitalize,Complex Conditional,The conditional expression s.length() >= 2 && Character.isHighSurrogate(s.charAt(0)) && Character.isLowSurrogate(s.charAt(1)) is complex.,72
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,capitalize,Magic Number,The method contains a magic number: 2,72
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,capitalize,Magic Number,The method contains a magic number: 2,72
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,capitalize,Magic Number,The method contains a magic number: 2,72
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,decapitalize,Complex Conditional,The conditional expression s.length() >= 2 && Character.isHighSurrogate(s.charAt(0)) && Character.isLowSurrogate(s.charAt(1)) is complex.,82
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,decapitalize,Magic Number,The method contains a magic number: 2,82
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,decapitalize,Magic Number,The method contains a magic number: 2,82
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,decapitalize,Magic Number,The method contains a magic number: 2,82
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,getNullability,Complex Method,Cyclomatic complexity of the method is 8,140
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,getNullability,Long Statement,The length of the statement "if (hasNonnull && hasNullable) return new GenerationResult<>(false`Collections.singletonList(MessageFormat.format("Parameter {0} is declared as both @Nullable and @Nonnull"`name)));" is 181.,140
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,getNullability,Long Statement,The length of the statement "if (!type.isReference() && hasNullable) return new GenerationResult<>(false`Collections.singletonList(MessageFormat.format("Parameter {0} is non-reference` but declared as @Nullable"`name)));" is 191.,140
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,annotateNonnull,Empty catch clause,The method has an empty catch block.,166
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,annotateNullable,Empty catch clause,The method has an empty catch block.,175
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Source,annotateParametersAreNonnullByDefault,Empty catch clause,The method has an empty catch block.,184
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Types,Types,Long Identifier,The length of the field _UnsupportedOperationException is 30.,73
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Types,isSerializable,Long Statement,The length of the statement "if (type.isPrimitive() || type.isArray()) return type.isPrimitive() || type.isArray() && isSerializable(type.elementType());" is 124.,103
sviperll_adt4j,com.github.sviperll.adt4j.model.util,Types,isComparable,Long Statement,The length of the statement "if (type.isPrimitive() || type.isArray()) return type.isPrimitive() || type.isArray() && isComparable(type.elementType());" is 122.,111
sviperll_adt4j,com.github.sviperll.adt4j.model.util,FilerCodeWriter,openBinary,Long Statement,The length of the statement "if (!fileName.endsWith(JAVA_SOURCE_SUFFIX)) throw new IllegalStateException("Unexpected file name passed to code writer: " + fileName);" is 135.,77
sviperll_adt4j,com.github.sviperll.adt4j.examples,RecordVisitor,valueOf,Long Parameter List,The method has 16 parameters. ,43
sviperll_adt4j,com.github.sviperll.adt4j.examples,Main,main,Magic Number,The method contains a magic number: 5,35
sviperll_adt4j,com.github.sviperll.adt4j.examples,Main,main,Magic Number,The method contains a magic number: 7,35
sviperll_adt4j,com.github.sviperll.adt4j.examples,Main,main,Magic Number,The method contains a magic number: 3,35
sviperll_adt4j,com.github.sviperll.adt4j.examples,Main,main,Magic Number,The method contains a magic number: 2,35
sviperll_adt4j,com.github.sviperll.adt4j.examples,Main,main,Magic Number,The method contains a magic number: 3,35
