Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,StringSelector,createPropertySelector,Magic Number,The method contains a magic number: 2,59
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,StringSelector,createPropertySelector,Magic Number,The method contains a magic number: 2,59
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,CompositeSelectorTest,testConstructWithSelectorList,Long Statement,The length of the statement "CompositeSelector selector=new CompositeSelector(Arrays.asList(new PropertySelector("abc")`null`new PropertySelector("edf")));" is 126.,60
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,CompositeSelectorTest,testAddSubSelector,Long Identifier,The length of the identifier resultKeySizeBeforeAddSubSelector is 33.,66
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,CompositeSelectorTest,testAddNullSubSelector,Long Identifier,The length of the identifier resultKeySizeBeforeAddSubSelector is 33.,81
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,BeanSelectorTest,shouldGetNullWhenIsNotInstance,Magic Number,The method contains a magic number: 2,28
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,ClassSelectorTest,testExcept,Long Statement,The length of the statement "assertThat(selector.select(new Address()).keySet()`containsInAnyOrder(ArrayUtils.removeElements(defaultPropertyNamesOfAddress`"address"`"officeAddress")));" is 155.,89
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.selectors,ClassSelectorTest,testAdd,Long Statement,The length of the statement "assertThat(selector.select(new Address()).keySet()`containsInAnyOrder(ArrayUtils.add(defaultPropertyNamesOfAddress`"officeAddress")));" is 134.,135
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,DefaultNullValuePropertyValueGetter,getProperty,Long Statement,The length of the statement "LoggerFactory.getLogger(DefaultNullValuePropertyValueGetter.class).info("Object is null or the property [{}] is blank` returning null"`propertyName);" is 149.,8
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,DefaultNullValuePropertyValueGetter,getProperty,Long Statement,The length of the statement "LoggerFactory.getLogger(DefaultNullValuePropertyValueGetter.class).info("Exception [{}] when fetching property [{}] from object [{}]` returning null as the value."`e.toString()`propertyName`from);" is 196.,8
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,BeanPropertyMatcher,matches,Long Statement,The length of the statement "logger.info("Exception [{}] when matching value [{}] (property [{}] of item [{}]) with matcher [{}]"`ex.toString()`propertyValue`property`item`matcher);" is 152.,22
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,BeanQuery,nested,Long Statement,The length of the statement "throw new IllegalStateException("This is only for BeanQueries which has a KeyValueMapSelector selector. The current selector is a " + this.selector);" is 149.,63
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,BeanQuery,nested,Long Statement,The length of the statement "BeanQuery<Map<String`Object>> result=new BeanQuery<Map<String`Object>>(new NestedKeyValueMapSelector((KeyValueMapSelector)this.selector));" is 138.,63
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,BeanQuery,orderBy,Long Statement,The length of the statement "this.comparator=new DelegatedSortOrderableComparator(new PropertyComparator(orderByProperty`new ComparableObjectComparator()));" is 127.,119
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery,DataLoader,assertDataToJsonEqualsExpectedFileContent,Long Statement,The length of the statement "throw new IllegalStateException(String.format("Exception while comparing file [%s] with object [%s]"`fullFileName`data)`ex);" is 124.,36
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,ComparableObjectComparator,compare,Long Statement,The length of the statement "logger.debug("Get exception [{}] when comparable1 [{}] compareTo comparable2 [{}]` set result as 0"`ex.toString()`comparable1`comparable2);" is 139.,12
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,PropertyComparatorTest,shouldGetNullPropertyWhenIsNotComparable,Long Statement,The length of the statement "assertEquals(0`new PropertyComparator("notComparable").compare(new TestComparingClass(new Object())`new TestComparingClass(new Object())));" is 139.,87
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,PropertyComparatorTest,shouldWorkForPrimitiveType,Magic Number,The method contains a magic number: 2,93
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,PropertyComparatorTest,shouldWorkForPrimitiveType,Magic Number,The method contains a magic number: 2,93
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,PropertyComparatorTest,shouldWorkForPrimitiveType,Magic Number,The method contains a magic number: 3,93
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,DefaultSortOrderableComparatorTest,setup,Magic Number,The method contains a magic number: 99,12
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,DefaultSortOrderableComparatorTest,ascCompare,Magic Number,The method contains a magic number: 99,16
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,DefaultSortOrderableComparatorTest,shouldGetAscCompareResultInDefault,Magic Number,The method contains a magic number: 99,24
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,DefaultSortOrderableComparatorTest,shouldGetDescresultWhenDescCalled,Magic Number,The method contains a magic number: 99,32
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.comparators,DefaultSortOrderableComparatorTest,shouldGetAscResultWhenAscCalled,Magic Number,The method contains a magic number: 99,42
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Long Statement,The length of the statement "assertThat((List<Author>)result.get(0).get("authorList")`allOf(notNullValue()`isA((Class<List<Author>>)(Class)List.class)));" is 124.,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Magic Number,The method contains a magic number: 3,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Magic Number,The method contains a magic number: 5,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Magic Number,The method contains a magic number: 5,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Magic Number,The method contains a magic number: 2,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnAllFields,Magic Number,The method contains a magic number: 5,26
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldExecuteFromBeanMethodWorking,Magic Number,The method contains a magic number: 2,63
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldWorkWithMixedSelectors,Long Statement,The length of the statement "List<Map<String`Object>> result=select(allOf(Book.class).except("authorList"`"authorMap"`"mainAuthor")`property("price").as("p")`property("mainAuthor")).from(mainData).execute();" is 178.,96
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldReturnFieldsOnlyWithPropertys,Long Statement,The length of the statement "List<Map<String`Object>> result=select(property("name")`property("price")`property("price").as("p")`property("mainAuthor")).from(mainData).execute();" is 149.,119
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldNotChangeOrder,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).execute();" is 124.,126
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldInPriceAscOrder,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).orderBy("price").asc().execute();" is 147.,133
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldIncludeNullValueWhenSortingDesc,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name").from(dataLoader.loadSourceData("forOrdersWithNullValue.json")).orderBy("name").desc().execute();" is 143.,141
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldIncludeNullValueWhenSortingAsc,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name").from(dataLoader.loadSourceData("forOrdersWithNullValue.json")).orderBy("name").asc().execute();" is 142.,147
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testSortingWithNotExistProperty,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).orderBy("notExistingProperty").execute();" is 155.,153
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,shouldInPriceDescOrder,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).orderBy("price").desc().execute();" is 148.,160
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testOrderByBeanComparator,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).orderBy(priceBeanComparator).desc().execute();" is 160.,167
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testOrderByProvidedPropertyComparator,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forOrders.json")).orderBy("price"`doubleComparator).desc().execute();" is 165.,181
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testChainedOrderByProperties,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forChainedOrder.json")).orderBy(orderByProperty("price")`orderByProperty("name").desc()).execute();" is 195.,196
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testChainedOrderByPropertiesDesc,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor").from(dataLoader.loadSourceData("forChainedOrder.json")).orderBy(orderByProperty("price")`orderByProperty("name").desc()).desc().execute();" is 202.,203
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testSelectNullProperties,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`mainAuthor`authorList").from(dataLoader.loadSourceData("withoutAuthorMapAndList.json")).execute();" is 149.,210
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testNotExistingProperties,Long Statement,The length of the statement "List<Map<String`Object>> result=select("a`b`mainAuthor").from(dataLoader.loadSourceData("withoutAuthorMapAndList.json")).execute();" is 131.,217
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testSelectMapNestedProperties,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`authorMap(Book1-Author-1).address as book1AuthorAddress").from(mainData).execute();" is 134.,237
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMapHamcrestMatchers,Long Statement,The length of the statement "List<Map<String`Object>> result=select(allOf(Book.class)).from(mainData).where(value("authorMap"`hasKey("Book1-Author-1"))).execute();" is 134.,256
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingCollectionHamcestMatchers,Long Statement,The length of the statement "List<Map<String`Object>> result=select(allOf(Book.class)).from(mainData).where(value("authorList"`hasItem(firstAuthorOfBook1AuthorList))).execute();" is 148.,263
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMultipleWhereConditions,Long Statement,The length of the statement "List<Map<String`Object>> result=select("price`name`mainAuthor.name as mainAuthorName").from(dataLoader.loadSourceData("forMultipleWhereConditions.json")).where(anyOf(value("name"`startsWith("Book1"))`value("name"`is("Book2")))`allOf(value("price"`greaterThan(53d))`value("price"`lessThan(65d)))).orderBy("name").desc().execute();" is 329.,272
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMultipleWhereConditions,Magic Number,The method contains a magic number: 53d,272
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMultipleWhereConditions,Magic Number,The method contains a magic number: 65d,272
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMapMatchersOnNormalProperty,Long Statement,The length of the statement "List<Map<String`Object>> result=select("price`name`mainAuthor.name as mainAuthorName").from(dataLoader.loadSourceData("forMultipleWhereConditions.json")).where(anyOf(value("name"`startsWith("Book1"))`value("name"`is("Book2"))`value("name"`hasEntry("abc"`"edf")))`allOf(value("price"`greaterThan(53d))`value("price"`lessThan(65d)))).orderBy("name").desc().execute();" is 365.,287
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMapMatchersOnNormalProperty,Magic Number,The method contains a magic number: 53d,287
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testUsingMapMatchersOnNormalProperty,Magic Number,The method contains a magic number: 65d,287
Jimmy-Shi_bean-query,cn.jimmyshi.beanquery.example,BeanQueryExample,testNestedResultFeature,Long Statement,The length of the statement "List<Map<String`Object>> result=select("name`price`authorMap(Book1-Author-1).address.address as author.address` authorMap(Book1-Author-1).address.postCode as author.postCode").nested().from(mainData).execute();" is 210.,302
