Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
fge_grappa,com.github.fge.grappa.buffers,LineCounter,doBinarySearch,Magic Number,The method contains a magic number: 2,104
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,singleLineInputIsCorrectlyHandled,Magic Number,The method contains a magic number: 5,39
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,singleLineInputIsCorrectlyHandled,Magic Number,The method contains a magic number: 3,39
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,singleLineInputIsCorrectlyHandled,Magic Number,The method contains a magic number: 4,39
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 2,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 7,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 8,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 3,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 8,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,emptyLinesAreCorrectlyDetected,Magic Number,The method contains a magic number: 8,49
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,nonNewlineLastLineIsCorrectlyDetected,Magic Number,The method contains a magic number: 2,59
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,nonNewlineLastLineIsCorrectlyDetected,Magic Number,The method contains a magic number: 6,59
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,nonNewlineLastLineIsCorrectlyDetected,Magic Number,The method contains a magic number: 11,59
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Long Statement,The length of the statement "final List<Range<Integer>> ranges=new Builder<Range<Integer>>().add(Range.closedOpen(0`3)).add(Range.closedOpen(3`7)).add(Range.closedOpen(7`16)).add(Range.closedOpen(16`18)).add(Range.closedOpen(18`20)).build();" is 212.,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 2000L,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 4,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 3,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 3,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 7,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 7,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 16,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 16,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 18,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 18,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 20,67
fge_grappa,com.github.fge.grappa.buffers,LineCounterTest,frontierIndexDoesNotCauseEndlessLoop,Magic Number,The method contains a magic number: 18,67
fge_grappa,com.github.fge.grappa.stack,ArrayValueStack,doSwap,Magic Number,The method contains a magic number: 2,88
fge_grappa,com.github.fge.grappa.stack,ValueStackBase,swap,Magic Number,The method contains a magic number: 2,189
fge_grappa,com.github.fge.grappa.stack,ValueStackBase,swap,Magic Number,The method contains a magic number: 2,201
fge_grappa,com.github.fge.grappa.stack,ArrayValueStackTest,checkContents,Long Statement,The length of the statement "for (int index=0; index < size; index++) soft.assertThat(array[index]).as("element at index %d"`index).isEqualTo(expected.get(index));" is 134.,33
fge_grappa,com.github.fge.grappa.stack,ArrayValueStackTest,checkContents,Long Statement,The length of the statement "for (int index=size; index < length; index++) soft.assertThat(array[index]).as("null element at index %d?"`index).isNull();" is 123.,33
fge_grappa,com.github.fge.grappa.stack,ListValueStackTest,checkContents,Long Statement,The length of the statement "for (int index=0; index < expectedSize; index++) soft.assertThat(stack.peek(index)).as("element at index %d"`index).isEqualTo(values.get(index));" is 145.,29
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,initialSizeTest,Magic Number,The method contains a magic number: 6,32
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,pushMiddleTest,Magic Number,The method contains a magic number: 3,60
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,pushAtEndTest,Magic Number,The method contains a magic number: 6,68
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,popMidleTest,Magic Number,The method contains a magic number: 4,86
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,peekMiddleTest,Magic Number,The method contains a magic number: 2,106
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,pokeMiddleTest,Magic Number,The method contains a magic number: 2,129
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,pokeMiddleTest,Magic Number,The method contains a magic number: 2,129
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,swapMiddleEvenTest,Magic Number,The method contains a magic number: 4,158
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,swapMiddleOddTest,Magic Number,The method contains a magic number: 5,166
fge_grappa,com.github.fge.grappa.stack,ValueStackTest,snapshotTest,Magic Number,The method contains a magic number: 3,174
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pushIllegalIndex,Magic Number,The method contains a magic number: 2,58
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pushIllegalIndex,Magic Number,The method contains a magic number: 3,58
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pushTest,Magic Number,The method contains a magic number: 3,73
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pushTest,Magic Number,The method contains a magic number: 3,73
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pushTest,Magic Number,The method contains a magic number: 3,73
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,popTest,Magic Number,The method contains a magic number: 3,109
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,popTest,Magic Number,The method contains a magic number: 2,109
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,popTest,Magic Number,The method contains a magic number: 2,109
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,peekIllegalIndex,Magic Number,The method contains a magic number: 2,130
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,peekIllegalIndex,Magic Number,The method contains a magic number: 2,130
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,peekTest,Magic Number,The method contains a magic number: 3,143
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,peekTest,Magic Number,The method contains a magic number: 2,143
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,peekTest,Magic Number,The method contains a magic number: 2,143
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pokeIllegalIndex,Magic Number,The method contains a magic number: 2,167
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pokeIllegalIndex,Magic Number,The method contains a magic number: 2,167
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pokeTest,Magic Number,The method contains a magic number: 3,180
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pokeTest,Magic Number,The method contains a magic number: 2,180
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,pokeTest,Magic Number,The method contains a magic number: 2,180
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,swapIllegalIndex,Magic Number,The method contains a magic number: 2,203
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,swapIllegalIndex,Magic Number,The method contains a magic number: 3,203
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,swapTest,Magic Number,The method contains a magic number: 3,216
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,swapTest,Magic Number,The method contains a magic number: 3,216
fge_grappa,com.github.fge.grappa.stack,ValueStackBaseTest,swapTest,Magic Number,The method contains a magic number: 3,216
fge_grappa,com.github.fge.grappa.misc,AsmUtils,getClassForType,Complex Method,Cyclomatic complexity of the method is 12,59
fge_grappa,com.github.fge.grappa.misc,AsmUtils,getClassMethod,Long Statement,The length of the statement "throw new RuntimeException("Method '" + methodName + "' with descriptor '"+ methodDesc+ "' not found in '"+ c+ "' or any supertype");" is 133.,113
fge_grappa,com.github.fge.grappa.misc,AsmUtils,isBooleanValueOfZ,Long Statement,The length of the statement "return CodegenUtils.p(Boolean.class).equals(methodOwner) && "valueOf".equals(methodName) && CodegenUtils.sig(Boolean.class`boolean.class).equals(methodDesc);" is 157.,232
fge_grappa,com.github.fge.grappa.misc,AsmUtils,isVarRoot,Long Statement,The length of the statement "return "<init>".equals(methodName) && CodegenUtils.sig(void.class`Object.class).equals(methodDesc) && isAssignableTo(methodOwner`Var.class);" is 140.,272
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,min,Long Statement,The length of the statement "Preconditions.checkArgument(nrCycles >= 0`"illegal repetition number specified (" + nrCycles + ")` must be 0 or greater");" is 122.,52
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,max,Long Statement,The length of the statement "Preconditions.checkArgument(nrCycles >= 0`"illegal repetition number specified (" + nrCycles + ")` must be 0 or greater");" is 122.,69
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,times,Long Statement,The length of the statement "Preconditions.checkArgument(nrCycles >= 0`"illegal repetition number specified (" + nrCycles + ")` must be 0 or greater");" is 122.,86
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,times,Long Statement,The length of the statement "Preconditions.checkArgument(minCycles >= 0`"illegal repetition number specified (" + minCycles + ")` must be 0 or greater");" is 124.,103
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,times,Long Statement,The length of the statement "Preconditions.checkArgument(maxCycles >= minCycles`"illegal range specified (" + minCycles + "` "+ maxCycles+ "): maximum must be greater than minimum");" is 153.,103
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilder,normalizeRange,Long Statement,The length of the statement "if (newRange.isEmpty()) throw new IllegalArgumentException("illegal range " + range + ": intersection with "+ AT_LEAST_ZERO+ " is empty");" is 138.,264
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilderTest,maxTest,Magic Number,The method contains a magic number: 3,91
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilderTest,singleArgumentTimesTest,Magic Number,The method contains a magic number: 3,138
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilderTest,twoArgumentsTimesDelegateTest,Magic Number,The method contains a magic number: 2,168
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilderTest,twoArgumentsTimesTest,Magic Number,The method contains a magic number: 3,187
fge_grappa,com.github.fge.grappa.misc,RangeMatcherBuilderTest,twoArgumentsTimesTest,Magic Number,The method contains a magic number: 5,187
fge_grappa,com.github.fge.grappa.parsers,BaseActions,check,Long Statement,The length of the statement "if (context == null || context.getMatcher() == null) throw new InvalidGrammarException("rule has an unwrapped action" + " expression");" is 135.,488
fge_grappa,com.github.fge.grappa.parsers,BaseParser,anyOf,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@488f4248,226
fge_grappa,com.github.fge.grappa.parsers,BaseParser,asciiChars,Magic Number,The method contains a magic number: 0x7f,1007
fge_grappa,com.github.fge.grappa.parsers,BaseParser,ctl,Magic Number,The method contains a magic number: 0x1f,1039
fge_grappa,com.github.fge.grappa.parsers,BaseParser,ctl,Magic Number,The method contains a magic number: 0x7f,1039
fge_grappa,com.github.fge.grappa.parsers,BaseParser,octet,Magic Number,The method contains a magic number: 0xff,1128
fge_grappa,com.github.fge.grappa.parsers,BaseParser,vchar,Magic Number,The method contains a magic number: 0x21,1148
fge_grappa,com.github.fge.grappa.parsers,BaseParser,vchar,Magic Number,The method contains a magic number: 0x7e,1148
fge_grappa,com.github.fge.grappa.parsers,BaseParser,toRule,Long Statement,The length of the statement "final String errmsg=obj instanceof Boolean ? "unwrapped Boolean value in rule (wrap it with ACTION())" : "'" + obj + "' cannot be automatically converted to a rule";" is 165.,1240
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testOneliner,Magic Number,The method contains a magic number: 7,38
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testOneliner,Magic Number,The method contains a magic number: 2,38
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testOneliner,Magic Number,The method contains a magic number: 7,38
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testOneliner,Magic Number,The method contains a magic number: 8,38
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 7,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 8,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 6,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 7,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 8,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 9,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 10,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 11,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 12,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 13,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,testMultiliner,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,indicesAndCodePoints,Magic Number,The method contains a magic number: 8,88
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,indicesAndCodePoints,Magic Number,The method contains a magic number: 3,88
fge_grappa,com.github.fge.grappa.parsers,CharSequenceInputBufferTest,indicesAndCodePoints,Magic Number,The method contains a magic number: 9,88
fge_grappa,com.github.fge.grappa.matchers.trie,TrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 8,52
fge_grappa,com.github.fge.grappa.matchers.trie,TrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 6,52
fge_grappa,com.github.fge.grappa.matchers.trie,TrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.matchers.trie,TrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 10,52
fge_grappa,com.github.fge.grappa.matchers,CharMatcher,getLabel,Magic Number,The method contains a magic number: 0xffff,49
fge_grappa,com.github.fge.grappa.matchers,CharMatcher,getLabel,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@64a836a9,49
fge_grappa,com.github.fge.grappa.matchers,ActionMatcher,ActionMatcher,Empty catch clause,The method has an empty catch block.,46
fge_grappa,com.github.fge.grappa.matchers,RegexMatcherTest,getMatchData,Magic Number,The method contains a magic number: 8,39
fge_grappa,com.github.fge.grappa.matchers,RegexMatcherTest,getMatchData,Magic Number,The method contains a magic number: 6,39
fge_grappa,com.github.fge.grappa.matchers,RegexMatcherTest,getMatchData,Magic Number,The method contains a magic number: 6,39
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcher,matchCycle,Long Statement,The length of the statement "if (context.getCurrentIndex() == beforeCycle) throw new GrappaException("joining rule (" + joining + ") of a "+ "JoinMatcher cannot match an empty character sequence!");" is 169.,127
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 3,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 6,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 9,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 7,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 9,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 9,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 9,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 4,52
fge_grappa,com.github.fge.grappa.matchers.join,JoinMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 7,52
fge_grappa,com.github.fge.grappa.matchers.unicode,CodePointMatcherTest,testData,Magic Number,The method contains a magic number: 2,67
fge_grappa,com.github.fge.grappa.matchers.unicode,CodePointRangeMatcherTest,matchingWorks,Long Parameter List,The method has 5 parameters. ,87
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcher,match,Long Statement,The length of the statement "if (beforeMatch == afterMatch) throw new GrappaException("Inner rule of a RepeatMatcher" + " cannot match an empty character sequence");" is 136.,49
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 3,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 6,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 6,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 10,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 4,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 8,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 10,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 9,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 10,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 2,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 4,51
fge_grappa,com.github.fge.grappa.matchers.repeat,RepeatMatcherMatchTest,getInput1MatchData,Magic Number,The method contains a magic number: 8,51
fge_grappa,com.github.fge.grappa.run.context,DefaultMatcherContext,DefaultMatcherContext,Long Statement,The length of the statement "this(Objects.requireNonNull(inputBuffer`"inputBuffer")`Objects.requireNonNull(valueStack`"valueStack")`Objects.requireNonNull(matchHandler`"matchHandler")`null`0);" is 163.,83
fge_grappa,com.github.fge.grappa.run.context,DefaultMatcherContext,DefaultMatcherContext,Long Parameter List,The method has 5 parameters. ,105
fge_grappa,com.github.fge.grappa.run.context,DefaultMatcherContext,runMatcher,Long Statement,The length of the statement "final String msg=String.format("exception thrown when parsing %s '%s' at input position %s"`matcher instanceof ActionMatcher ? "action" : "rule"`getPath()`inputBuffer.getPosition(currentIndex));" is 194.,306
fge_grappa,com.github.fge.grappa.run.trace,TracingListener,matchSuccess,Long Statement,The length of the statement "sb.append(parentNodeId).append(';').append(nodeId).append(';').append(level).append(";1;").append(matcherId).append(';').append(startIndex).append(';').append(endIndex).append(';').append(time).append('\n');" is 207.,134
fge_grappa,com.github.fge.grappa.run.trace,TracingListener,matchFailure,Long Statement,The length of the statement "sb.append(parentNodeId).append(';').append(nodeId).append(';').append(level).append(";0;").append(matcherId).append(';').append(startIndex).append(';').append(endIndex).append(';').append(time).append('\n');" is 207.,170
fge_grappa,com.github.fge.grappa.run.trace,TracingListener,copyMatcherInfo,Long Statement,The length of the statement "sb.append(descriptor.getId()).append(';').append(descriptor.getClassName()).append(';').append(descriptor.getType()).append(';').append(descriptor.getName()).append('\n');" is 171.,245
fge_grappa,com.github.fge.grappa.run.trace,TracingListener,copyParseInfo,Long Statement,The length of the statement "sb.append(startTime).append(';').append(prematchIndices.size()).append(';').append(nextMatcherId).append(';').append(nrLines).append(';').append(nrChars).append(';').append(nrCodePoints).append(';').append(nextNodeId).append('\n');" is 231.,268
fge_grappa,com.github.fge.grappa.run.trace,LabelEscaper,LabelEscaper,Magic Number,The method contains a magic number: 0x80,58
fge_grappa,com.github.fge.grappa.support,Characters,hashCode,Magic Number,The method contains a magic number: 31,160
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Complex Method,Cyclomatic complexity of the method is 10,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Magic Number,The method contains a magic number: 2,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Magic Number,The method contains a magic number: 3,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Magic Number,The method contains a magic number: 4,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Magic Number,The method contains a magic number: 5,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,pushInt,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@591d5ac0,184
fge_grappa,com.github.fge.grappa.transform,CodeBlock,visitLocalVariable,Long Parameter List,The method has 6 parameters. ,1304
fge_grappa,com.github.fge.grappa.transform,CodeBlock,visitFrame,Long Parameter List,The method has 5 parameters. ,1329
fge_grappa,com.github.fge.grappa.transform,CodeBlock,frame_same,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@702a025e,1358
fge_grappa,com.github.fge.grappa.transform,ParserTransformer,runMethodTransformers,Long Statement,The length of the statement "for ( final RuleMethodProcessor methodProcessor : methodProcessors) if (methodProcessor.appliesTo(classNode`ruleMethod)) methodProcessor.process(classNode`ruleMethod);" is 167.,113
fge_grappa,com.github.fge.grappa.transform,ParserTransformer,runMethodTransformers,Long Statement,The length of the statement "for ( final RuleMethod ruleMethod : classNode.getRuleMethods().values()) if (!ruleMethod.isGenerationSkipped()) classNode.methods.add(ruleMethod);" is 146.,113
fge_grappa,com.github.fge.grappa.transform,ParserTransformer,createRuleMethodProcessors,Long Statement,The length of the statement "return ImmutableList.of(new UnusedLabelsRemover()`new ReturnInstructionUnifier()`new InstructionGraphCreator()`new ImplicitActionsConverter()`new InstructionGroupCreator()`new InstructionGroupPreparer()`new ActionClassGenerator(false)`new VarInitClassGenerator(false)`new RuleMethodRewriter()`new SuperCallRewriter()`new BodyWithSuperCallReplacer()`new VarFramingGenerator()`new LabellingGenerator()`new CachingGenerator());" is 424.,138
fge_grappa,com.github.fge.grappa.transform,RuleMethodInterpreter,findArrayCreatorPredecessor,Complex Conditional,The conditional expression opcode == ANEWARRAY || opcode == NEWARRAY || opcode == MULTIANEWARRAY is complex.,163
fge_grappa,com.github.fge.grappa.transform,RuleMethodInterpreter,findArrayCreatorPredecessor,Long Statement,The length of the statement "final String errorMessage="Internal error during analysis of rule" + " method '" + method.name + "'` please report this error to"+ " https://github.com/fge/grappa/issues";" is 171.,163
fge_grappa,com.github.fge.grappa.transform,ParserGenerator,runMethodTransformers,Long Statement,The length of the statement "for ( final RuleMethodProcessor methodProcessor : PROCESSORS) if (methodProcessor.appliesTo(classNode`ruleMethod)) methodProcessor.process(classNode`ruleMethod);" is 161.,144
fge_grappa,com.github.fge.grappa.transform,ParserGenerator,runMethodTransformers,Long Statement,The length of the statement "for ( final RuleMethod ruleMethod : classNode.getRuleMethods().values()) if (!ruleMethod.isGenerationSkipped()) classNode.methods.add(ruleMethod);" is 146.,144
fge_grappa,com.github.fge.grappa.transform,ClassNodeInializerTest,testClassNodeSetup,Long Statement,The length of the statement "assertEquals(join(classNode.getRuleMethods().values()`RuleMethod::containsExplicitActions)`"RuleWithDirectExplicitAction`RuleWithIndirectExplicitAction`RuleWithIndirectExplicitDownAction`" + "RuleWithIndirectExplicit2ParamAction`RuleWith2Returns`RuleWithCaptureInAction");" is 272.,39
fge_grappa,com.github.fge.grappa.transform,ClassNodeInializerTest,testClassNodeSetup,Long Statement,The length of the statement "assertEquals(join(classNode.getRuleMethods().values()`RuleMethod::containsImplicitActions)`"RuleWithDirectImplicitAction`RuleWithIndirectImplicitAction`RuleWithDirectImplicitUpAction`" + "RuleWithIndirectExplicitDownAction`RuleWithIndirectImplicitParamAction`" + "RuleWithCachedAnd2Params`RuleWithCaptureParameter`RuleWithIllegalImplicitAction`"+ "RuleWithActionAccessingPrivateField`RuleWithActionAccessingPrivateMethod");" is 423.,39
fge_grappa,com.github.fge.grappa.transform,ClassNodeInializerTest,testClassNodeSetup,Long Statement,The length of the statement "assertEquals(join(classNode.getRuleMethods().values()`RuleMethod::hasCachedAnnotation)`"RuleWithoutAction`RuleWithLabel`RuleWithNamedLabel`RuleWithLeaf`RuleWithDirectImplicitAction`" + "RuleWithIndirectImplicitAction`RuleWithDirectExplicitAction`RuleWithIndirectExplicitAction`" + "RuleWithDirectImplicitUpAction`RuleWithIndirectExplicitDownAction`RuleWithCapture1`RuleWithCapture2`"+ "RuleWithCachedAnd2Params`RuleWithCaptureInAction`RuleWithActionAccessingPrivateField`"+ "RuleWithActionAccessingPrivateMethod`Ch`IgnoreCase`CharRange`AnyOf`String`IgnoreCase`"+ "FirstOf`OneOrMore`Optional`Sequence`Test`TestNot`ZeroOrMore`Eoi`Any`Empty");" is 640.,39
fge_grappa,com.github.fge.grappa.transform,ClassNodeInializerTest,testClassNodeSetup,Long Statement,The length of the statement "assertEquals(join(classNode.getRuleMethods().values()`RuleMethod::hasDontLabelAnnotation)`"RuleWithoutAction`RuleWithLabel`RuleWithNamedLabel`RuleWithLeaf`RuleWithDirectImplicitAction`" + "RuleWithIndirectImplicitAction`RuleWithDirectExplicitAction`RuleWithIndirectExplicitAction`" + "RuleWithDirectImplicitUpAction`RuleWithIndirectExplicitDownAction`RuleWithCapture1`RuleWithCapture2`"+ "RuleWithCaptureInAction`RuleWithActionAccessingPrivateField`RuleWithActionAccessingPrivateMethod`"+ "Eoi`Any`Empty");" is 506.,39
fge_grappa,com.github.fge.grappa.transform,TestParser,RuleWithIndirectImplicitAction,Magic Number,The method contains a magic number: 5,52
fge_grappa,com.github.fge.grappa.transform,TestParser,RuleWithComplexActionSetup,Magic Number,The method contains a magic number: 26,68
fge_grappa,com.github.fge.grappa.transform,TestParser,RuleWithComplexActionSetup,Magic Number,The method contains a magic number: 18,68
fge_grappa,com.github.fge.grappa.transform.generate,ConstructorGenerator,process,Long Statement,The length of the statement "if (constructors.isEmpty()) throw new InvalidGrammarException("parser class \"%s\" has no " + "visible constructor for derives classes");" is 137.,46
fge_grappa,com.github.fge.grappa.transform.generate,ConstructorGenerator,createConstuctor,Long Statement,The length of the statement "final MethodNode newConstructor=new MethodNode(ACC_PUBLIC`constructor.name`constructor.desc`constructor.signature`exceptions.toArray(new String[exceptions.size()]));" is 165.,62
fge_grappa,com.github.fge.grappa.transform.generate,ConstructorGenerator,createConstuctor,Long Statement,The length of the statement "final CodeBlock block=CodeBlock.newCodeBlock().aload(0).addAll(createArgumentLoaders(constructor.desc)).invokespecial(classNode.getParentType().getInternalName()`"<init>"`constructor.desc).rawReturn();" is 201.,62
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeInitializer,visit,Long Parameter List,The method has 6 parameters. ,117
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeInitializer,visitMethod,Complex Method,Cyclomatic complexity of the method is 9,158
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeInitializer,visitMethod,Long Parameter List,The method has 5 parameters. ,158
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeBootstrap,visit,Long Parameter List,The method has 6 parameters. ,114
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeBootstrap,visitMethod,Complex Method,Cyclomatic complexity of the method is 9,158
fge_grappa,com.github.fge.grappa.transform.generate,ClassNodeBootstrap,visitMethod,Long Parameter List,The method has 5 parameters. ,158
fge_grappa,com.github.fge.grappa.transform.base,InstructionGraphNode,addPredecessors,Long Statement,The length of the statement "for ( final BasicValue pred : preds) if (pred instanceof InstructionGraphNode) addPredecessor((InstructionGraphNode)pred);" is 122.,143
fge_grappa,com.github.fge.grappa.transform.base,RuleMethod,RuleMethod,Long Parameter List,The method has 7 parameters. ,96
fge_grappa,com.github.fge.grappa.transform.base,RuleMethod,visitMethodInsn,Complex Method,Cyclomatic complexity of the method is 8,258
fge_grappa,com.github.fge.grappa.transform.base,RuleMethod,visitMethodInsn,Long Parameter List,The method has 5 parameters. ,258
fge_grappa,com.github.fge.grappa.transform.base,RuleMethod,visitLocalVariable,Long Parameter List,The method has 6 parameters. ,326
fge_grappa,com.github.fge.grappa.transform.base,RuleMethod,visitLocalVariable,Long Statement,The length of the statement "if (index > parameterCount && Var.class.isAssignableFrom(getClassForType(type))) localVarVariables.add(new LocalVariableNode(name`desc`null`null`null`index));" is 158.,326
fge_grappa,com.github.fge.grappa.transform.load,ReflectiveClassLoader,ReflectiveClassLoader,Long Statement,The length of the statement "final ParserTransformException exception=new ParserTransformException("could not change the necessary access modifiers");" is 121.,27
fge_grappa,com.github.fge.grappa.transform.hash,InstructionGroupHasher,hashAndGetName,Magic Number,The method contains a magic number: 10,85
fge_grappa,com.github.fge.grappa.transform.hash,InstructionGroupHasher,hashAndGetName,Magic Number,The method contains a magic number: 10,85
fge_grappa,com.github.fge.grappa.transform.hash,InstructionGroupHasher,visitMethodInsn,Long Parameter List,The method has 5 parameters. ,137
fge_grappa,com.github.fge.grappa.transform.process,ImplicitActionsConverter,getDependents,Long Statement,The length of the statement "for ( final InstructionGraphNode node : method.getGraphNodes()) if (node.getPredecessors().contains(predecessor)) dependents.add(node);" is 135.,183
fge_grappa,com.github.fge.grappa.transform.process,ImplicitActionsConverter,createActionWrappingInsn,Long Statement,The length of the statement "return new MethodInsnNode(INVOKESTATIC`CodegenUtils.p(BaseParser.class)`"ACTION"`CodegenUtils.sig(Action.class`boolean.class)`false);" is 133.,195
fge_grappa,com.github.fge.grappa.transform.process,RuleMethodRewriter,createNewGroupClassInstance,Long Statement,The length of the statement "block.newobj(internalName).dup().ldc(constant).invokespecial(internalName`"<init>"`CodegenUtils.sig(void.class`String.class));" is 126.,94
fge_grappa,com.github.fge.grappa.transform.process,RuleMethodRewriter,createNewGroupClassInstance,Long Statement,The length of the statement "if (root.isActionRoot() && method.hasSkipActionsInPredicatesAnnotation()) block.dup().invokevirtual(internalName`"setSkipInPredicates"`CodegenUtils.sig(void.class));" is 165.,94
fge_grappa,com.github.fge.grappa.transform.process,GroupClassGenerator,generateClassBasics,Long Statement,The length of the statement "cw.visit(Opcodes.V1_8`ACC_PUBLIC + ACC_FINAL + ACC_SYNTHETIC`group.getGroupClassType().getInternalName()`null`getBaseType().getInternalName()`null);" is 148.,125
fge_grappa,com.github.fge.grappa.transform.process,GroupClassGenerator,generateFields,Long Statement,The length of the statement "for ( final FieldNode field : group.getFields()) cw.visitField(ACC_PUBLIC + ACC_SYNTHETIC`field.name`field.desc`null`null);" is 123.,136
fge_grappa,com.github.fge.grappa.transform.process,GroupClassGenerator,generateConstructor,Long Statement,The length of the statement "mv.visitMethodInsn(INVOKESPECIAL`getBaseType().getInternalName()`"<init>"`CodegenUtils.sig(void.class`String.class)`false);" is 123.,150
fge_grappa,com.github.fge.grappa.transform.process,GroupClassGenerator,insertSetContextCalls,Long Statement,The length of the statement "block.clear().aload(1).invokeinterface(CodegenUtils.p(ContextAware.class)`"setContext"`CodegenUtils.sig(void.class`Context.class));" is 131.,165
fge_grappa,com.github.fge.grappa.transform.process,LabellingGenerator,process,Long Statement,The length of the statement "final CodeBlock block=CodeBlock.newCodeBlock().dup().ifnull(label).ldc(getLabelText(method)).invokeinterface(CodegenUtils.p(Rule.class)`"label"`CodegenUtils.sig(Rule.class`String.class)).label(label);" is 200.,51
fge_grappa,com.github.fge.grappa.transform.process,BodyWithSuperCallReplacer,appliesTo,Long Statement,The length of the statement "return !method.isBodyRewritten() && method.getOwnerClass() == classNode.getParentClass() && method.getLocalVarVariables().isEmpty();" is 132.,35
fge_grappa,com.github.fge.grappa.transform.process,BodyWithSuperCallReplacer,process,Long Statement,The length of the statement "final CodeBlock block=CodeBlock.newCodeBlock().aload(0).addAll(argumentLoaders).invokespecial(parentDesc`method.name`method.desc).areturn();" is 140.,48
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generateGetFromCache,Long Statement,The length of the statement "block.dup().ifnonnull(alreadyInitialized).pop().aload(0).newobj(CodegenUtils.p(HashMap.class)).dup_x1().dup().invokespecial(CodegenUtils.p(HashMap.class)`"<init>"`CodegenUtils.sig(void.class)).putfield(classNode.name`cacheFieldName`cacheFieldDesc).label(alreadyInitialized);" is 274.,115
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generateGetFromCache,Long Statement,The length of the statement "block.dup().astore(method.maxLocals).invokevirtual(CodegenUtils.p(HashMap.class)`"get"`CodegenUtils.sig(Object.class`Object.class));" is 132.,115
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,findUnusedCacheFieldName,Magic Number,The method contains a magic number: 2,173
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generatePushParameterAsObject,Complex Method,Cyclomatic complexity of the method is 12,203
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generatePushParameterAsObject,Missing default,The following switch statement is missing a default case: !org.eclipse.jdt.core.dom.SwitchStatement@742bd1d8,203
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generateStoreNewProxyMatcher,Long Statement,The length of the statement "block.newobj(CodegenUtils.p(ProxyMatcher.class)).dup().invokespecial(CodegenUtils.p(ProxyMatcher.class)`"<init>"`CodegenUtils.sig(void.class));" is 143.,258
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generateArmProxyMatcher,Long Statement,The length of the statement "block.dup_x1().checkcast(CodegenUtils.p(Matcher.class)).invokevirtual(CodegenUtils.p(ProxyMatcher.class)`"arm"`CodegenUtils.sig(void.class`Matcher.class));" is 155.,269
fge_grappa,com.github.fge.grappa.transform.process,CachingGenerator,generateStoreInCache,Long Statement,The length of the statement "block.aload(method.maxLocals).swap().aload(0).getfield(classNode.name`cacheFieldName`CodegenUtils.ci(HashMap.class)).dup_x2().pop().invokevirtual(CodegenUtils.p(HashMap.class)`"put"`CodegenUtils.sig(Object.class`Object.class`Object.class)).pop();" is 246.,277
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,markGroup,Long Statement,The length of the statement "if (!condition) throw new InvalidGrammarException("method " + method.name + " contains illegal nested ACTION/Var constructs");" is 126.,107
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,markGroup,Magic Number,The method contains a magic number: 2,107
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,verify,Long Statement,The length of the statement "if (node.isXStore()) throw new InvalidGrammarException("An action or Var initializer" + " in method " + method.name + " contains an illegal write"+ " to a local variable/parameter");" is 182.,171
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,verify,Long Statement,The length of the statement "throw new InvalidGrammarException("error during bytecode analysis of" + " rule method " + method.name + ": discontinuous group block");" is 135.,171
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,verifyAccess,Complex Method,Cyclomatic complexity of the method is 9,202
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,verifyAccess,Long Statement,The length of the statement "if (isPrivateField(field.owner`field.name)) throw new InvalidGrammarException("rule methods cannot " + "access private fields (method: " + method.name + "` field: "+ field.name+ ')');" is 183.,202
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupCreator,verifyAccess,Long Statement,The length of the statement "if (isPrivate(calledMethod.owner`calledMethod.name`calledMethod.desc)) throw new InvalidGrammarException("method " + method.name + " contains an illegal call to private method "+ calledMethod.name+ "; make the latter protected or"+ " package private");" is 252.,202
fge_grappa,com.github.fge.grappa.transform.process,VarFramingGenerator,process,Long Statement,The length of the statement "block.invokespecial(CodegenUtils.p(VarFramingMatcher.class)`"<init>"`CodegenUtils.sig(void.class`Rule.class`Var[].class));" is 122.,51
fge_grappa,com.github.fge.grappa.transform.process,VarFramingGenerator,createVarFieldArray,Long Statement,The length of the statement "block.dup().bipush(i).aload(var.index).dup().ldc(varName).invokevirtual(CodegenUtils.p(Var.class)`"setName"`CodegenUtils.sig(void.class`String.class)).aastore();" is 161.,80
fge_grappa,com.github.fge.grappa.transform.process,VarInitClassGeneratorTest,testVarInitClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class "+ "com/github/fge/grappa/transform/process"+ "/VarInit$XXXXXXXXXXXXXXXX extends "+ "com/github/fge/grappa/transform/runtime/BaseVarInit {\n"+ "\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL "+ "com/github/fge/grappa/transform/runtime/BaseVarInit.<init> "+ "(Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public get()Ljava/lang/Object;\n"+ " NEW java/util/ArrayList\n"+ " DUP\n"+ " INVOKESPECIAL java/util/ArrayList.<init> ()V\n"+ " ARETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 1\n"+ "}\n");" is 837.,73
fge_grappa,com.github.fge.grappa.transform.process,VarInitClassGeneratorTest,testVarInitClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class "+ "com/github/fge/grappa/transform/process"+ "/VarInit$XXXXXXXXXXXXXXXX extends "+ "com/github/fge/grappa/transform/runtime/BaseVarInit {\n"+ "\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL "+ "com/github/fge/grappa/transform/runtime/BaseVarInit.<init> "+ "(Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public get()Ljava/lang/Object;\n"+ " BIPUSH 26\n"+ " INVOKESTATIC java/lang/Integer.valueOf (I)"+ "Ljava/lang/Integer;\n"+ " ARETURN\n"+ " MAXSTACK = 1\n"+ " MAXLOCALS = 1\n"+ "}\n");" is 834.,73
fge_grappa,com.github.fge.grappa.transform.process,VarInitClassGeneratorTest,testVarInitClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class "+ "com/github/fge/grappa/transform/process"+ "/Action$XXXXXXXXXXXXXXXX extends "+ "com/github/fge/grappa/transform/runtime/BaseAction {\n"+ "\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic Lcom/github/fge/grappa/support/Var; field$0\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic "+ "Lcom/github/fge/grappa/transform/process"+ "/VarInitClassGeneratorTest$Parser$$grappa; field$1\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL "+ "com/github/fge/grappa/transform/runtime/BaseAction.<init> "+ "(Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public run(Lcom/github/fge/grappa/run/context/Context;)Z\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/process"+ "/Action$XXXXXXXXXXXXXXXX.field$0 : "+ "Lcom/github/fge/grappa/support/Var;\n"+ " INVOKEVIRTUAL com/github/fge/grappa/support/Var.get ()"+ "Ljava/lang/Object;\n"+ " CHECKCAST java/util/List\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/process"+ "/Action$XXXXXXXXXXXXXXXX.field$1 : "+ "Lcom/github/fge/grappa/transform/process"+ "/VarInitClassGeneratorTest$Parser$$grappa;\n"+ " DUP\n"+ " ALOAD 1\n"+ " INVOKEINTERFACE "+ "com/github/fge/grappa/run/context/ContextAware.setContext "+ "(Lcom/github/fge/grappa/run/context/Context;)V\n"+ " INVOKEVIRTUAL "+ "com/github/fge/grappa/transform/process"+ "/VarInitClassGeneratorTest$Parser.match ()Ljava/lang/String;\n"+ " INVOKEINTERFACE java/util/List.add (Ljava/lang/Object;)Z\n"+ " IRETURN\n"+ " MAXSTACK = 4\n"+ " MAXLOCALS = 2\n"+ "}\n");" is 1837.,73
fge_grappa,com.github.fge.grappa.transform.process,VarInitClassGeneratorTest,testVarInitClassGeneration,Magic Number,The method contains a magic number: 3,73
fge_grappa,com.github.fge.grappa.transform.process,VarInitClassGeneratorTest,testVarInitClassGeneration,Magic Number,The method contains a magic number: 2,73
fge_grappa,com.github.fge.grappa.transform.process,ErrorDetectionTest,testRuleWithActionAccessingPrivateField,Empty catch clause,The method has an empty catch block.,44
fge_grappa,com.github.fge.grappa.transform.process,ErrorDetectionTest,testRuleWithActionAccessingPrivateField,Magic Number,The method contains a magic number: 5,44
fge_grappa,com.github.fge.grappa.transform.process,ErrorDetectionTest,testRuleWithActionAccessingPrivateMethod,Empty catch clause,The method has an empty catch block.,61
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 3,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 3,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 2,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 2,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 5,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 2,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 3,47
fge_grappa,com.github.fge.grappa.transform.process,InstructionGroupPreparerTest,testRuleWithComplexActionSetup,Magic Number,The method contains a magic number: 4,47
fge_grappa,com.github.fge.grappa.transform.process,RuleMethodRewriterTest,testRuleMethodRewriting,Long Statement,The length of the statement "assertEquals(getMethodInstructionList(processMethod("RuleWithIndirectImplicitAction"`processors)).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "Method 'RuleWithIndirectImplicitAction':\n" + " 0 ALOAD 0\n"+ " 1 BIPUSH 97\n"+ " 2 INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " 3 BIPUSH 98\n"+ " 4 INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " 5 ICONST_1\n"+ " 6 ANEWARRAY java/lang/Object\n"+ " 7 DUP\n"+ " 8 ICONST_0\n"+ " 9 NEW com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX\n"+ "10 DUP\n"+ "11 LDC \"RuleWithIndirectImplicitAction_Action1\"\n"+ "12 INVOKESPECIAL com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.<init> (Ljava/lang/String;)V\n"+ "13 DUP\n"+ "14 ALOAD 0\n"+ "15 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$0 : Lcom/github/fge/grappa/transform/TestParser$$grappa;\n"+ "16 AASTORE\n"+ "17 INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ "18 ARETURN\n");" is 1092.,52
fge_grappa,com.github.fge.grappa.transform.process,RuleMethodRewriterTest,testRuleMethodRewriting,Long Statement,The length of the statement "assertEquals(getMethodInstructionList(processMethod("RuleWithComplexActionSetup"`processors)).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "Method 'RuleWithComplexActionSetup':\n" + " 0 BIPUSH 26\n"+ " 1 ISTORE 2\n"+ " 2 BIPUSH 18\n"+ " 3 ISTORE 3\n"+ " 4 NEW com/github/fge/grappa/support/Var\n"+ " 5 DUP\n"+ " 6 NEW com/github/fge/grappa/transform/VarInit$XXXXXXXXXXXXXXXX\n"+ " 7 DUP\n"+ " 8 LDC \"RuleWithComplexActionSetup_VarInit1\"\n"+ " 9 INVOKESPECIAL com/github/fge/grappa/transform/VarInit$XXXXXXXXXXXXXXXX.<init> (Ljava/lang/String;)V\n"+ "10 INVOKESPECIAL com/github/fge/grappa/support/Var.<init> (Ljava/util/function/Supplier;)V\n"+ "11 ASTORE 4\n"+ "12 ILOAD 2\n"+ "13 ILOAD 1\n"+ "14 IADD\n"+ "15 ISTORE 2\n"+ "16 ILOAD 3\n"+ "17 ILOAD 2\n"+ "18 ISUB\n"+ "19 ISTORE 3\n"+ "20 ALOAD 0\n"+ "21 BIPUSH 97\n"+ "22 ILOAD 2\n"+ "23 IADD\n"+ "24 INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;\n"+ "25 NEW com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX\n"+ "26 DUP\n"+ "27 LDC \"RuleWithComplexActionSetup_Action1\"\n"+ "28 INVOKESPECIAL com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.<init> (Ljava/lang/String;)V\n"+ "29 DUP\n"+ "30 ILOAD 2\n"+ "31 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$0 : I\n"+ "32 DUP\n"+ "33 ILOAD 1\n"+ "34 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$1 : I\n"+ "35 DUP\n"+ "36 ILOAD 3\n"+ "37 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$2 : I\n"+ "38 ICONST_2\n"+ "39 ANEWARRAY java/lang/Object\n"+ "40 DUP\n"+ "41 ICONST_0\n"+ "42 ALOAD 4\n"+ "43 AASTORE\n"+ "44 DUP\n"+ "45 ICONST_1\n"+ "46 NEW com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX\n"+ "47 DUP\n"+ "48 LDC \"RuleWithComplexActionSetup_Action2\"\n"+ "49 INVOKESPECIAL com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.<init> (Ljava/lang/String;)V\n"+ "50 DUP\n"+ "51 ALOAD 0\n"+ "52 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$0 : Lcom/github/fge/grappa/transform/TestParser$$grappa;\n"+ "53 DUP\n"+ "54 ILOAD 1\n"+ "55 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$1 : I\n"+ "56 DUP\n"+ "57 ALOAD 4\n"+ "58 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$2 : Lcom/github/fge/grappa/support/Var;\n"+ "59 DUP\n"+ "60 ILOAD 2\n"+ "61 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$3 : I\n"+ "62 DUP\n"+ "63 ILOAD 3\n"+ "64 PUTFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$4 : I\n"+ "65 AASTORE\n"+ "66 INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ "67 NEW com/github/fge/grappa/matchers/wrap/VarFramingMatcher\n"+ "68 DUP_X1\n"+ "69 SWAP\n"+ "70 BIPUSH 1\n"+ "71 ANEWARRAY com/github/fge/grappa/support/Var\n"+ "72 DUP\n"+ "73 BIPUSH 0\n"+ "74 ALOAD 4\n"+ "75 DUP\n"+ "76 LDC \"RuleWithComplexActionSetup:string\"\n"+ "77 INVOKEVIRTUAL com/github/fge/grappa/support/Var.setName (Ljava/lang/String;)V\n"+ "78 AASTORE\n"+ "79 INVOKESPECIAL com/github/fge/grappa/matchers/wrap/VarFramingMatcher.<init> (Lcom/github/fge/grappa/rules/Rule;[Lcom/github/fge/grappa/support/Var;)V\n"+ "80 ARETURN\n");" is 3272.,52
fge_grappa,com.github.fge.grappa.transform.process,ActionClassGeneratorTest,testActionClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class com/github/fge/grappa/transform/VarInit$XXXXXXXXXXXXXXXX extends com/github/fge/grappa/transform/runtime/BaseVarInit {\n"+ "\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/runtime/BaseVarInit.<init> (Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public get()Ljava/lang/Object;\n"+ " LDC \"text\"\n"+ " ARETURN\n"+ " MAXSTACK = 1\n"+ " MAXLOCALS = 1\n"+ "}\n");" is 737.,53
fge_grappa,com.github.fge.grappa.transform.process,ActionClassGeneratorTest,testActionClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX extends com/github/fge/grappa/transform/runtime/BaseAction {\n"+ "\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$0\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$1\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$2\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/runtime/BaseAction.<init> (Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public run(Lcom/github/fge/grappa/run/context/Context;)Z\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$0 : I\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$1 : I\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$2 : I\n"+ " IADD\n"+ " IF_ICMPLE L0\n"+ " ICONST_1\n"+ " GOTO L1\n"+ " L0\n"+ " FRAME SAME\n"+ " ICONST_0\n"+ " L1\n"+ " FRAME SAME1 I\n"+ " IRETURN\n"+ " MAXSTACK = 3\n"+ " MAXLOCALS = 2\n"+ "}\n");" is 1365.,53
fge_grappa,com.github.fge.grappa.transform.process,ActionClassGeneratorTest,testActionClassGeneration,Long Statement,The length of the statement "assertEquals(getClassDump(group.getGroupClassCode()).replaceAll("(?<=\\$)[A-Za-z0-9]{16}"`"XXXXXXXXXXXXXXXX")`"" + "// class version 52.0 (52)\n" + "// access flags 0x1011\n"+ "public final synthetic class com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX extends com/github/fge/grappa/transform/runtime/BaseAction {\n"+ "\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic Lcom/github/fge/grappa/transform/TestParser$$grappa; field$0\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$1\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic Lcom/github/fge/grappa/support/Var; field$2\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$3\n"+ "\n"+ " // access flags 0x1001\n"+ " public synthetic I field$4\n"+ "\n"+ " // access flags 0x1\n"+ " public <init>(Ljava/lang/String;)V\n"+ " ALOAD 0\n"+ " ALOAD 1\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/runtime/BaseAction.<init> (Ljava/lang/String;)V\n"+ " RETURN\n"+ " MAXSTACK = 2\n"+ " MAXLOCALS = 2\n"+ "\n"+ " // access flags 0x1\n"+ " public run(Lcom/github/fge/grappa/run/context/Context;)Z\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$0 : Lcom/github/fge/grappa/transform/TestParser$$grappa;\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser.integer : I\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$1 : I\n"+ " IADD\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$2 : Lcom/github/fge/grappa/support/Var;\n"+ " INVOKEVIRTUAL com/github/fge/grappa/support/Var.get ()Ljava/lang/Object;\n"+ " CHECKCAST java/lang/String\n"+ " INVOKEVIRTUAL java/lang/String.length ()I\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$3 : I\n"+ " ISUB\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/Action$XXXXXXXXXXXXXXXX.field$4 : I\n"+ " ISUB\n"+ " IF_ICMPGE L0\n"+ " ICONST_1\n"+ " GOTO L1\n"+ " L0\n"+ " FRAME SAME\n"+ " ICONST_0\n"+ " L1\n"+ " FRAME SAME1 I\n"+ " IRETURN\n"+ " MAXSTACK = 3\n"+ " MAXLOCALS = 2\n"+ "}\n");" is 2117.,53
fge_grappa,com.github.fge.grappa.transform.process,ActionClassGeneratorTest,testActionClassGeneration,Magic Number,The method contains a magic number: 3,53
fge_grappa,com.github.fge.grappa.transform.process,ActionClassGeneratorTest,testActionClassGeneration,Magic Number,The method contains a magic number: 2,53
fge_grappa,com.github.fge.grappa.transform.process,ImplicitActionsConverterTest,testReturnInstructionUnification,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithIndirectImplicitAction"`processors)`"" + " ALOAD 0\n" + " BIPUSH 97\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " BIPUSH 98\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " ICONST_1\n"+ " ANEWARRAY java/lang/Object\n"+ " DUP\n"+ " ICONST_0\n"+ " ALOAD 0\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.action ()Z\n"+ " IFNE L0\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser.integer : I\n"+ " ICONST_5\n"+ " IF_ICMPNE L1\n"+ " L0\n"+ " ICONST_1\n"+ " GOTO L2\n"+ " L1\n"+ " ICONST_0\n"+ " L2\n"+ " INVOKESTATIC com/github/fge/grappa/parsers/BaseParser.ACTION (Z)Lcom/github/fge/grappa/rules/Action;\n"+ " AASTORE\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 942.,43
fge_grappa,com.github.fge.grappa.transform.process,ImplicitActionsConverterTest,testReturnInstructionUnification,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithDirectImplicitAction"`processors)`"" + " ALOAD 0\n" + " BIPUSH 97\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser.integer : I\n"+ " IFNE L0\n"+ " ICONST_1\n"+ " GOTO L1\n"+ " L0\n"+ " ICONST_0\n"+ " L1\n"+ " INVOKESTATIC com/github/fge/grappa/parsers/BaseParser.ACTION (Z)Lcom/github/fge/grappa/rules/Action;\n"+ " ICONST_2\n"+ " ANEWARRAY java/lang/Object\n"+ " DUP\n"+ " ICONST_0\n"+ " BIPUSH 98\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " AASTORE\n"+ " DUP\n"+ " ICONST_1\n"+ " BIPUSH 99\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " AASTORE\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 936.,43
fge_grappa,com.github.fge.grappa.transform.process,CachingGeneratorTest,test,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithoutAction"`processors)`"" + " ALOAD 0\n" + " GETFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithoutAction : Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L0\n"+ " ARETURN\n"+ " L0\n"+ " POP\n"+ " NEW com/github/fge/grappa/matchers/wrap/ProxyMatcher\n"+ " DUP\n"+ " INVOKESPECIAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.<init> ()V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithoutAction : Lcom/github/fge/grappa/rules/Rule;\n"+ " ALOAD 0\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/TestParser.RuleWithoutAction ()Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L1\n"+ " LDC \"RuleWithoutAction\"\n"+ " INVOKEINTERFACE com/github/fge/grappa/rules/Rule.label (Ljava/lang/String;)Lcom/github/fge/grappa/rules/Rule;\n"+ " L1\n"+ " DUP_X1\n"+ " CHECKCAST com/github/fge/grappa/matchers/base/Matcher\n"+ " INVOKEVIRTUAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.arm (Lcom/github/fge/grappa/matchers/base/Matcher;)V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithoutAction : Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 1273.,42
fge_grappa,com.github.fge.grappa.transform.process,CachingGeneratorTest,test,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithNamedLabel"`processors)`"" + " @Lcom/github/fge/grappa/annotations/Label;(value=\"harry\")\n" + " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithNamedLabel : Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L0\n"+ " ARETURN\n"+ " L0\n"+ " POP\n"+ " NEW com/github/fge/grappa/matchers/wrap/ProxyMatcher\n"+ " DUP\n"+ " INVOKESPECIAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.<init> ()V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithNamedLabel : Lcom/github/fge/grappa/rules/Rule;\n"+ " ALOAD 0\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/TestParser.RuleWithNamedLabel ()Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L1\n"+ " LDC \"harry\"\n"+ " INVOKEINTERFACE com/github/fge/grappa/rules/Rule.label (Ljava/lang/String;)Lcom/github/fge/grappa/rules/Rule;\n"+ " L1\n"+ " DUP_X1\n"+ " CHECKCAST com/github/fge/grappa/matchers/base/Matcher\n"+ " INVOKEVIRTUAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.arm (Lcom/github/fge/grappa/matchers/base/Matcher;)V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithNamedLabel : Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 1332.,42
fge_grappa,com.github.fge.grappa.transform.process,CachingGeneratorTest,test,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithLeaf"`processors)`"" + " ALOAD 0\n" + " GETFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithLeaf : Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L0\n"+ " ARETURN\n"+ " L0\n"+ " POP\n"+ " NEW com/github/fge/grappa/matchers/wrap/ProxyMatcher\n"+ " DUP\n"+ " INVOKESPECIAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.<init> ()V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithLeaf : Lcom/github/fge/grappa/rules/Rule;\n"+ " ALOAD 0\n"+ " INVOKESPECIAL com/github/fge/grappa/transform/TestParser.RuleWithLeaf ()Lcom/github/fge/grappa/rules/Rule;\n"+ " DUP\n"+ " IFNULL L1\n"+ " LDC \"RuleWithLeaf\"\n"+ " INVOKEINTERFACE com/github/fge/grappa/rules/Rule.label (Ljava/lang/String;)Lcom/github/fge/grappa/rules/Rule;\n"+ " L1\n"+ " DUP_X1\n"+ " CHECKCAST com/github/fge/grappa/matchers/base/Matcher\n"+ " INVOKEVIRTUAL com/github/fge/grappa/matchers/wrap/ProxyMatcher.arm (Lcom/github/fge/grappa/matchers/base/Matcher;)V\n"+ " DUP\n"+ " ALOAD 0\n"+ " SWAP\n"+ " PUTFIELD com/github/fge/grappa/transform/TestParser$$grappa.cache$RuleWithLeaf : Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 1243.,42
fge_grappa,com.github.fge.grappa.transform.process,ReturnInstructionUnifierTest,testReturnInstructionUnification,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithSwitchAndAction"`processors)`"" + " ILOAD 1\n" + " LOOKUPSWITCH\n"+ " 0: L0\n"+ " default: L1\n"+ " L0\n"+ " ALOAD 0\n"+ " GETSTATIC com/github/fge/grappa/transform/TestParser.EMPTY : Lcom/github/fge/grappa/rules/Rule;\n"+ " ALOAD 0\n"+ " ICONST_1\n"+ " INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.push (Ljava/lang/Object;)Z\n"+ " INVOKESTATIC java/lang/Boolean.valueOf (Z)Ljava/lang/Boolean;\n"+ " ICONST_0\n"+ " ANEWARRAY java/lang/Object\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ " GOTO L2\n"+ " L1\n"+ " ACONST_NULL\n"+ " L2\n"+ " ARETURN\n");" is 801.,41
fge_grappa,com.github.fge.grappa.transform.process,ReturnInstructionUnifierTest,testReturnInstructionUnification,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWith2Returns"`processors)`"" + " ILOAD 1\n" + " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser.integer : I\n"+ " IF_ICMPNE L0\n"+ " ALOAD 0\n"+ " BIPUSH 97\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " ALOAD 0\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.action ()Z\n"+ " INVOKESTATIC com/github/fge/grappa/transform/TestParser.ACTION (Z)Lcom/github/fge/grappa/rules/Action;\n"+ " ICONST_0\n"+ " ANEWARRAY java/lang/Object\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ " GOTO L1\n"+ " L0\n"+ " ALOAD 0\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.eof ()Lcom/github/fge/grappa/rules/Rule;\n"+ " L1\n"+ " ARETURN\n");" is 867.,41
fge_grappa,com.github.fge.grappa.transform.process,ReturnInstructionUnifierTest,testReturnInstructionUnification,Long Statement,The length of the statement "assertTraceDumpEquality(processMethod("RuleWithDirectExplicitAction"`processors)`"" + " ALOAD 0\n" + " BIPUSH 97\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " ALOAD 0\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.action ()Z\n"+ " IFEQ L0\n"+ " ALOAD 0\n"+ " GETFIELD com/github/fge/grappa/transform/TestParser.integer : I\n"+ " IFLE L0\n"+ " ICONST_1\n"+ " GOTO L1\n"+ " L0\n"+ " ICONST_0\n"+ " L1\n"+ " INVOKESTATIC com/github/fge/grappa/transform/TestParser.ACTION (Z)Lcom/github/fge/grappa/rules/Action;\n"+ " ICONST_1\n"+ " ANEWARRAY java/lang/Object\n"+ " DUP\n"+ " ICONST_0\n"+ " BIPUSH 98\n"+ " INVOKESTATIC java/lang/Character.valueOf (C)Ljava/lang/Character;\n"+ " AASTORE\n"+ " INVOKEVIRTUAL com/github/fge/grappa/transform/TestParser.sequence (Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Lcom/github/fge/grappa/rules/Rule;\n"+ " ARETURN\n");" is 913.,41
fge_grappa,com.github.fge.grappa.matchers.trie.ignorecase,CaseInsensitiveTrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 8,57
fge_grappa,com.github.fge.grappa.matchers.trie.ignorecase,CaseInsensitiveTrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 6,57
fge_grappa,com.github.fge.grappa.matchers.trie.ignorecase,CaseInsensitiveTrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 2,57
fge_grappa,com.github.fge.grappa.matchers.trie.ignorecase,CaseInsensitiveTrieMatcherTest,getMatchData,Magic Number,The method contains a magic number: 10,57
fge_grappa,com.github.fge.grappa.future,ClassVisitorExample,visit,Long Parameter List,The method has 6 parameters. ,39
fge_grappa,com.github.fge.grappa.future,ClassVisitorExample,visitMethod,Complex Conditional,The conditional expression areturn != -1 && nodes[i].getOpcode() != -1 && frames[i].getStackSize() == 0 is complex.,48
fge_grappa,com.github.fge.grappa.future,ClassVisitorExample,visitMethod,Long Parameter List,The method has 5 parameters. ,48
fge_grappa,com.github.fge.grappa.future,ClassVisitorExample,visitEnd,Complex Conditional,The conditional expression areturn != -1 && nodes[i].getOpcode() != -1 && frames[i].getStackSize() == 0 is complex.,61
fge_grappa,com.github.fge.grappa.future,Tester,main,Long Statement,The length of the statement "final String desc1="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;" + "Ljava/lang/invoke/MethodType;Ljava/lang/String;)" + "Ljava/lang/invoke/CallSite;";" is 165.,37
fge_grappa,com.github.fge.grappa.future,Tester,main,Long Statement,The length of the statement "visitor.visitInvokeDynamicInsn("call"`"(Ljava/lang/String;)V"`new Handle(H_INVOKESTATIC`owner`"genCallSite"`"(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;" + "Ljava/lang/invoke/MethodType;Ljava/lang/String;)" + "Ljava/lang/invoke/CallSite;")`"world");" is 264.,37
fge_grappa,com.github.fge.grappa.future,Tester,main,Magic Number,The method contains a magic number: 2,37
