Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
Netflix_Raigad,com.netflix.raigad.discovery.utils,DataFetcher,fetchData,Magic Number,The method contains a magic number: 1000,29
Netflix_Raigad,com.netflix.raigad.discovery.utils,DataFetcher,fetchData,Magic Number,The method contains a magic number: 10000,29
Netflix_Raigad,com.netflix.raigad.discovery.utils,DataFetcher,fetchData,Magic Number,The method contains a magic number: 200,29
Netflix_Raigad,com.netflix.raigad.discovery.utils,DataFetcher,fetchData,Magic Number,The method contains a magic number: 2048,29
Netflix_Raigad,com.netflix.raigad.discovery,RaigadUnicastHostsProvider,buildDynamicNodes,Long Statement,The length of the statement "logger.info("[raigad-discovery] Adding instance [{}]` address [{}]` transport address [{}]"`instance.getId()`instance.getHostIP()`addresses[0]);" is 144.,47
Netflix_Raigad,com.netflix.raigad.discovery,RaigadInstance,toString,Long Statement,The length of the statement "return String.format("Host name [%s]` instance ID [%s]` app [%s]` AZ [%s]` ID [%s]` IP [%s]` DC [%s]` ASG [%s]` update time [%s]"`getHostName()`getInstanceId()`getApp()`getAvailabilityZone()`getId()`getHostIP()`getDC()`getAsg()`getUpdatetime());" is 245.,36
Netflix_Raigad,com.netflix.raigad.resources,NodeHealthCheck,checkHealth,Magic Number,The method contains a magic number: 500,37
Netflix_Raigad,com.netflix.raigad.resources,ElasticsearchConfig,getTribeNodes,Long Statement,The length of the statement "final List<RaigadInstance> instances=raigadServer.getInstanceManager().getAllInstancesPerCluster(sourceTribeClusterName);" is 121.,85
Netflix_Raigad,com.netflix.raigad.resources,SecurityGroupAdmin,addACL,Magic Number,The method contains a magic number: 8,49
Netflix_Raigad,com.netflix.raigad.resources,ElasticsearchBackup,restoreWithRename,Long Identifier,The length of the field REST_RESTORE_RENAME_REPLACEMENT is 31.,76
Netflix_Raigad,com.netflix.raigad.resources,ElasticsearchBackup,restoreWithRename,Long Parameter List,The method has 6 parameters. ,76
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes,Long Statement,The length of the statement "ElasticsearchConfig elasticsearchConfig=new ElasticsearchConfig(raigadServer`tribeUtils`new CustomConfigSource()`config);" is 121.,31
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes,Magic Number,The method contains a magic number: 200,31
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_notFound,Long Statement,The length of the statement "ElasticsearchConfig elasticsearchConfig=new ElasticsearchConfig(raigadServer`tribeUtils`new CustomConfigSource()`config);" is 121.,59
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_notFound,Magic Number,The method contains a magic number: 200,59
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_Error,Long Statement,The length of the statement "ElasticsearchConfig elasticsearchConfig=new ElasticsearchConfig(raigadServer`tribeUtils`new CustomConfigSource()`config);" is 121.,76
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_Error,Magic Number,The method contains a magic number: 500,76
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_handlesUnknownHostException,Long Statement,The length of the statement "ElasticsearchConfig elasticsearchConfig=new ElasticsearchConfig(raigadServer`tribeUtils`new CustomConfigSource()`config);" is 121.,93
Netflix_Raigad,com.netflix.raigad.resources,TestElasticsearchConfig,getNodes_handlesUnknownHostException,Magic Number,The method contains a magic number: 500,93
Netflix_Raigad,com.netflix.raigad.identity,InstanceManager,registerInstance,Long Statement,The length of the statement "return instanceFactory.create(config.getAppName()`config.getDC() + "." + config.getInstanceId()`config.getInstanceId()`config.getHostname()`config.getHostIP()`config.getRac()`config.getDC()`config.getASGName()`null);" is 216.,77
Netflix_Raigad,com.netflix.raigad.identity,InstanceManager,deregisterInstance,Complex Method,Cyclomatic complexity of the method is 10,85
Netflix_Raigad,com.netflix.raigad.identity,InstanceManager,getInstanceList,Magic Number,The method contains a magic number: 2,143
Netflix_Raigad,com.netflix.raigad.identity,RaigadInstance,toString,Long Statement,The length of the statement "return String.format("Hostname: %s` InstanceId: %s` App: %s` AvailabilityZone : %s` Id : %s` PublicIp : %s` DC : %s` ASG : %s` UpdateTime : %s"`getHostName()`getInstanceId()`getApp()`getAvailabilityZone()`getId()`getHostIP()`getDC()`getAsg()`getUpdatetime());" is 259.,83
Netflix_Raigad,com.netflix.raigad.identity,CassandraInstanceFactory,create,Long Parameter List,The method has 9 parameters. ,40
Netflix_Raigad,com.netflix.raigad.identity,CassandraInstanceFactory,create,Long Statement,The length of the statement "logger.info("Creating entry for instance {} (node ID {}` hostname {}` IP {}) in {} ES cluster in {}` {}"`instanceID`id`hostname`ip`app`zone`dc);" is 144.,40
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,InstanceDataDAOCassandra,Long Statement,The length of the statement "throw new RuntimeException("Thrift port for Astyanax can not be blank. Please use getCassandraThriftPortForAstyanax() property");" is 129.,76
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getAllInstances,Long Statement,The length of the statement "selectClause=String.format("SELECT * FROM %s WHERE %s = '%s' AND %s = '%s' "`CF_NAME_INSTANCES`CN_CLUSTER`cluster`CN_LOCATION`config.getDC());" is 142.,151
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getAllInstances,Long Statement,The length of the statement "final ColumnFamily<String`String> CF_INSTANCES_NEW=ColumnFamily.newColumnFamily(KS_NAME`StringSerializer.get()`StringSerializer.get());" is 135.,151
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getAllInstances,Long Statement,The length of the statement "OperationResult<CqlResult<String`String>> result=bootKeyspace.prepareQuery(CF_INSTANCES_NEW).withCql(selectClause).execute();" is 125.,151
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getLock,Long Statement,The length of the statement "if (result.getResult().size() > 0 && !result.getResult().getColumnByIndex(0).getName().equals(instance.getInstanceId())) {" is 122.,248
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getLock,Long Statement,The length of the statement "if (result.getResult().size() == 1 && result.getResult().getColumnByIndex(0).getName().equals(instance.getInstanceId())) {" is 122.,248
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getLock,Magic Number,The method contains a magic number: 6,248
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getLock,Magic Number,The method contains a magic number: 600,248
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getLock,Magic Number,The method contains a magic number: 100,248
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,findKey,Long Statement,The length of the statement "final String selectClause=String.format("SELECT * FROM %s WHERE %s = '%s' and %s = '%s' and %s = '%s' "`CF_NAME_INSTANCES`CN_CLUSTER`cluster`CN_INSTANCEID`instanceId`CN_LOCATION`dc);" is 182.,284
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,findKey,Long Statement,The length of the statement "final ColumnFamily<String`String> CF_INSTANCES_NEW=ColumnFamily.newColumnFamily(KS_NAME`StringSerializer.get()`StringSerializer.get());" is 135.,284
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,findKey,Long Statement,The length of the statement "OperationResult<CqlResult<String`String>> result=bootKeyspace.prepareQuery(CF_INSTANCES_NEW).withCql(selectClause).execute();" is 125.,284
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,findKey,Long Statement,The length of the statement "logger.warn("Caught an Unknown Exception during find a row matching cluster[" + cluster + "]` id["+ instanceId+ "]` and region["+ dc+ "] ... -> "+ e.getMessage());" is 163.,284
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,initWithThriftDriverWithEurekaHostsSupplier,Long Statement,The length of the statement "return new AstyanaxContext.Builder().forCluster(BOOT_CLUSTER).forKeyspace(KS_NAME).withAstyanaxConfiguration(new AstyanaxConfigurationImpl().setDiscoveryType(NodeDiscoveryType.DISCOVERY_SERVICE)).withConnectionPoolConfiguration(new ConnectionPoolConfigurationImpl("MyConnectionPool").setMaxConnsPerHost(3).setPort(thriftPortForAstyanax)).withHostSupplier(eurekaHostsSupplier.getSupplier(BOOT_CLUSTER)).withConnectionPoolMonitor(new CountingConnectionPoolMonitor()).buildKeyspace(ThriftFamilyFactory.getInstance());" is 514.,349
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,initWithThriftDriverWithEurekaHostsSupplier,Magic Number,The method contains a magic number: 3,349
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,initWithThriftDriverWithExternalHostsSupplier,Long Statement,The length of the statement "return new AstyanaxContext.Builder().forCluster(BOOT_CLUSTER).forKeyspace(KS_NAME).withAstyanaxConfiguration(new AstyanaxConfigurationImpl().setDiscoveryType(NodeDiscoveryType.DISCOVERY_SERVICE).setConnectionPoolType(ConnectionPoolType.ROUND_ROBIN)).withConnectionPoolConfiguration(new ConnectionPoolConfigurationImpl("MyConnectionPool").setMaxConnsPerHost(3).setPort(thriftPortForAstyanax)).withHostSupplier(getSupplier()).withConnectionPoolMonitor(new CountingConnectionPoolMonitor()).buildKeyspace(ThriftFamilyFactory.getInstance());" is 536.,370
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,initWithThriftDriverWithExternalHostsSupplier,Magic Number,The method contains a magic number: 3,370
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getSupplier,Long Statement,The length of the statement "List<String> cassandraHostnames=new ArrayList<>(Arrays.asList(StringUtils.split(config.getCommaSeparatedCassandraHostNames()`"`")));" is 132.,393
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,getSupplier,Long Statement,The length of the statement "throw new RuntimeException("Cassandra host names can not be blank` at least one host is needed." + "Please use getCommaSeparatedCassandraHostNames() property.");" is 161.,393
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,get,Long Statement,The length of the statement "List<String> cassandraHostnames=new ArrayList<>(Arrays.asList(StringUtils.split(config.getCommaSeparatedCassandraHostNames()`"`")));" is 132.,395
Netflix_Raigad,com.netflix.raigad.identity,InstanceDataDAOCassandra,get,Long Statement,The length of the statement "throw new RuntimeException("Cassandra host names can not be blank` at least one host is needed." + "Please use getCommaSeparatedCassandraHostNames() property.");" is 161.,395
Netflix_Raigad,com.netflix.raigad.identity,IRaigadInstanceFactory,create,Long Parameter List,The method has 9 parameters. ,42
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,getSupplier,Long Statement,The length of the statement "Host host=new Host(info.getHostName()`info.getPort()).addAlternateIpAddress(StringUtils.join(new String[]{parts[1]`parts[2]`parts[3]`parts[4]}`".")).addAlternateIpAddress(info.getIPAddr()).setId(info.getId());" is 209.,57
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,getSupplier,Magic Number,The method contains a magic number: 2,57
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,getSupplier,Magic Number,The method contains a magic number: 3,57
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,getSupplier,Magic Number,The method contains a magic number: 4,57
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,get,Long Statement,The length of the statement "Host host=new Host(info.getHostName()`info.getPort()).addAlternateIpAddress(StringUtils.join(new String[]{parts[1]`parts[2]`parts[3]`parts[4]}`".")).addAlternateIpAddress(info.getIPAddr()).setId(info.getId());" is 209.,62
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,get,Magic Number,The method contains a magic number: 2,62
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,get,Magic Number,The method contains a magic number: 3,62
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,get,Magic Number,The method contains a magic number: 4,62
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,apply,Long Statement,The length of the statement "Host host=new Host(info.getHostName()`info.getPort()).addAlternateIpAddress(StringUtils.join(new String[]{parts[1]`parts[2]`parts[3]`parts[4]}`".")).addAlternateIpAddress(info.getIPAddr()).setId(info.getId());" is 209.,94
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,apply,Magic Number,The method contains a magic number: 2,94
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,apply,Magic Number,The method contains a magic number: 3,94
Netflix_Raigad,com.netflix.raigad.identity,EurekaHostsSupplier,apply,Magic Number,The method contains a magic number: 4,94
Netflix_Raigad,com.netflix.raigad.utils,ElasticsearchProcessMonitor,getTimer,Magic Number,The method contains a magic number: 10L,101
Netflix_Raigad,com.netflix.raigad.utils,ElasticsearchProcessMonitor,getTimer,Magic Number,The method contains a magic number: 1000,101
Netflix_Raigad,com.netflix.raigad.utils,ElasticsearchTransportClient,instance,Long Identifier,The length of the field elasticsearchTransportClientAtomicReference is 43.,62
Netflix_Raigad,com.netflix.raigad.utils,ThreadSleeper,sleepQuietly,Empty catch clause,The method has an empty catch block.,29
Netflix_Raigad,com.netflix.raigad.utils,ExponentialRetryCallable,call,Magic Number,The method contains a magic number: 2,44
Netflix_Raigad,com.netflix.raigad.utils,HttpModule,runSnapshotBackupURL,Long Identifier,The length of the field SNAPSHOT_BKP_WAIT_FOR_COMPLETION_TAG is 36.,53
Netflix_Raigad,com.netflix.raigad.utils,BoundedExponentialRetryCallable,call,Magic Number,The method contains a magic number: 2,49
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getDataFromUrl,Magic Number,The method contains a magic number: 1000,54
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getDataFromUrl,Magic Number,The method contains a magic number: 1000,54
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getDataFromUrl,Magic Number,The method contains a magic number: 404,54
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getDataFromUrl,Magic Number,The method contains a magic number: 200,54
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getDataFromUrl,Magic Number,The method contains a magic number: 2048,54
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute GET URL (" + url + ")` exception Message: < Null Response or Null HttpEntity >");" is 137.,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute GET URL (" + url + ")` exception Message: ("+ IOUtils.toString(isStream`StandardCharsets.UTF_8.toString())+ ")");" is 169.,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Caught an exception during execution of URL (" + url + ")` exception Message: ("+ e+ ")");" is 128.,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Magic Number,The method contains a magic number: 1000,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Magic Number,The method contains a magic number: 1000,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpGetCommand,Magic Number,The method contains a magic number: 200,95
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute PUT URL (" + url + ")` exception message: < Null Response or Null HttpEntity >");" is 137.,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute PUT URL (" + url + ")` exception message: ("+ IOUtils.toString(isStream`StandardCharsets.UTF_8.toString())+ ")");" is 169.,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Caught an exception during execution of URL (" + url + ")` exception message: ("+ e+ ")");" is 128.,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Magic Number,The method contains a magic number: 1000,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Magic Number,The method contains a magic number: 1000,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPutCommand,Magic Number,The method contains a magic number: 200,137
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute POST URL (" + url + ") Exception Message: < Null Response or Null HttpEntity >");" is 137.,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Unable to execute POST URL (" + url + ") Exception Message: ("+ IOUtils.toString(isStream`StandardCharsets.UTF_8.toString())+ ")");" is 169.,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Long Statement,The length of the statement "throw new ElasticsearchHttpException("Caught an exception during execution of URL (" + url + ")Exception Message: ("+ e+ ")");" is 126.,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Magic Number,The method contains a magic number: 1000,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Magic Number,The method contains a magic number: 1000,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,runHttpPostCommand,Magic Number,The method contains a magic number: 200,181
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,toHex,Magic Number,The method contains a magic number: 2,266
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,toHex,Magic Number,The method contains a magic number: 8,266
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,toHex,Magic Number,The method contains a magic number: 6,266
Netflix_Raigad,com.netflix.raigad.utils,SystemUtils,getSecurityGroupIds,Long Statement,The length of the statement "String securityGroupIds=SystemUtils.getDataFromUrl("http://169.254.169.254/latest/meta-data/network/interfaces/macs/" + MAC_ID + "/security-group-ids/").trim();" is 160.,290
Netflix_Raigad,com.netflix.raigad.utils,TestElasticsearchProcessMonitor,cleanUp,Long Statement,The length of the statement "ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName("com.netflix.raigad.scheduler:type=" + ElasticsearchProcessMonitor.class.getName()));" is 159.,40
Netflix_Raigad,com.netflix.raigad.utils,TestElasticsearchUtils,getRaigadInstances,Magic Number,The method contains a magic number: 3,182
Netflix_Raigad,com.netflix.raigad.utils,TestElasticsearchUtils,getRaigadInstances,Magic Number,The method contains a magic number: 12345567,182
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,61
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,78
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,96
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,114
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,132
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,150
Netflix_Raigad,com.netflix.raigad.configuration,AbstractConfigSource,get,Empty catch clause,The method has an empty catch block.,168
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,setDefaultRACList,Magic Number,The method contains a magic number: 3,414
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isAsgBasedDedicatedDeployment,Long Identifier,The length of the field IS_ASG_BASED_DEPLOYMENT_ENABLED is 31.,619
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isCustomShardAllocationPolicyEnabled,Long Identifier,The length of the field IS_SHARD_ALLOCATION_POLICY_ENABLED is 34.,647
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getAutoCreateIndexInitialStartDelaySeconds,Long Identifier,The length of the field AUTOCREATE_INDEX_INITIAL_START_DELAY_SECONDS is 44.,682
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getAutoCreateIndexScheduleMinutes,Long Identifier,The length of the field AUTOCREATE_INDEX_SCHEDULE_MINUTES is 33.,687
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getCommaSeparatedIndicesToBackup,Long Identifier,The length of the field COMMA_SEPARATED_INDICES_TO_BACKUP is 33.,706
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,includeGlobalStateDuringBackup,Long Identifier,The length of the field INCLUDE_GLOBAL_STATE_DURING_BACKUP is 34.,716
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,includeIndexNameInSnapshot,Long Identifier,The length of the field INCLUDE_INDEX_NAME_IN_SNAPSHOT_BACKUP is 37.,726
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isHourlySnapshotEnabled,Long Identifier,The length of the field IS_HOURLY_SNAPSHOT_BACKUP_ENABLED is 33.,731
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getCommaSeparatedIndicesToRestore,Long Identifier,The length of the field COMMA_SEPARATED_INDICES_TO_RESTORE is 34.,776
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getRestoreTaskInitialDelayInSeconds,Long Identifier,The length of the field RESTORE_TASK_INITIAL_START_DELAY_SECONDS is 40.,781
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,amIMetadataEnabledTribeNode,Long Identifier,The length of the field AM_I_METADATA_ENABLED_TRIBE_NODE is 32.,796
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getCommaSeparatedSourceClustersForTribeNode,Long Identifier,The length of the field COMMA_SEPARATED_SOURCE_CLUSTERS_IN_TRIBE is 40.,801
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,amISourceClusterForTribeNode,Long Identifier,The length of the field AM_I_SOURCE_CLUSTER_FOR_TRIBE_NODE is 34.,806
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getCommaSeparatedTribeClusterNames,Long Identifier,The length of the field COMMA_SEPARATED_TRIBE_CLUSTERS is 30.,811
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isNodeMismatchWithDiscoveryEnabled,Long Identifier,The length of the field IS_NODE_MISMATCH_WITH_DISCOVERY_ENABLED is 39.,816
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isEurekaHealthCheckEnabled,Long Identifier,The length of the field IS_EUREKA_HEALTH_CHECK_ENABLED is 30.,826
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,isEurekaHostSupplierEnabled,Long Identifier,The length of the field IS_EUREKA_HOST_SUPPLIER_ENABLED is 31.,846
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getCommaSeparatedCassandraHostNames,Long Identifier,The length of the field COMMA_SEPARATED_CASSANDRA_HOSTNAMES is 35.,851
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,amISourceClusterForTribeNodeInMultiDC,Long Identifier,The length of the field AM_I_SOURCE_CLUSTER_FOR_TRIBE_NODE_IN_MULTI_DC is 46.,871
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,reportMetricsFromMasterOnly,Long Identifier,The length of the field REPORT_METRICS_FROM_MASTER_ONLY is 31.,876
Netflix_Raigad,com.netflix.raigad.configuration,RaigadConfiguration,getTribePreferredClusterIdOnConflict,Long Identifier,The length of the field TRIBE_PREFERRED_CLUSTER_ID_ON_CONFLICT is 38.,881
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,readFile,Magic Number,The method contains a magic number: 9001,9
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,readFile,Magic Number,The method contains a magic number: 4,9
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,updateKey,Magic Number,The method contains a magic number: 4,21
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,updateKey,Magic Number,The method contains a magic number: 5,21
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,updateKey,Magic Number,The method contains a magic number: 9001,21
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,updateKey,Magic Number,The method contains a magic number: 10,21
Netflix_Raigad,com.netflix.raigad.configuration,TestPropertiesConfigSource,updateKey,Magic Number,The method contains a magic number: 10,21
Netflix_Raigad,com.netflix.raigad.configuration,UnitTestModule,configure,Long Statement,The length of the statement "bind(IConfiguration.class).toInstance(new FakeConfiguration(FakeConfiguration.FAKE_REGION`"fake-app"`"az1"`"fakeInstance1"));" is 125.,14
Netflix_Raigad,com.netflix.raigad.configuration,TestCompositeConfigSource,readMultiple,Magic Number,The method contains a magic number: 3,26
Netflix_Raigad,com.netflix.raigad.configuration,FakeConfiguration,getAutoCreateIndexTimeout,Magic Number,The method contains a magic number: 3000,271
Netflix_Raigad,com.netflix.raigad.scheduler,RaigadScheduler,addTaskWithDelay,Magic Number,The method contains a magic number: 1000L,67
Netflix_Raigad,com.netflix.raigad.scheduler,RaigadScheduler,run,Magic Number,The method contains a magic number: 1000L,76
Netflix_Raigad,com.netflix.raigad.scheduler,NamedThreadPoolExecutor,NamedThreadPoolExecutor,Long Statement,The length of the statement "super(poolSize`poolSize`1000`TimeUnit.MILLISECONDS`queue`new ThreadFactoryBuilder().setDaemon(true).setNameFormat(poolName + "-%d").build()`new LocalRejectedExecutionHandler(queue));" is 182.,34
Netflix_Raigad,com.netflix.raigad.scheduler,NamedThreadPoolExecutor,NamedThreadPoolExecutor,Magic Number,The method contains a magic number: 1000,34
Netflix_Raigad,com.netflix.raigad.scheduler,TestScheduler,testSchedule,Magic Number,The method contains a magic number: 10,21
Netflix_Raigad,com.netflix.raigad.scheduler,TestScheduler,testSchedule,Magic Number,The method contains a magic number: 1000,21
Netflix_Raigad,com.netflix.raigad.scheduler,TestScheduler,testSingleInstanceSchedule,Magic Number,The method contains a magic number: 3,33
Netflix_Raigad,com.netflix.raigad.scheduler,TestScheduler,testSingleInstanceSchedule,Magic Number,The method contains a magic number: 4000,33
Netflix_Raigad,com.netflix.raigad.scheduler,TestScheduler,testSingleInstanceSchedule,Magic Number,The method contains a magic number: 3,33
Netflix_Raigad,com.netflix.raigad.backup,S3Repository,getRepoParamPrint,Long Statement,The length of the statement "return "bucket: <" + repositorySettingsParams.getBucket() + "> "+ "base_path: <"+ repositorySettingsParams.getBase_path()+ "> "+ "region: <"+ repositorySettingsParams.getRegion()+ ">";" is 184.,131
Netflix_Raigad,com.netflix.raigad.backup,S3Repository,getPutRepositoryResponse,Long Statement,The length of the statement "return esTransportClient.admin().cluster().preparePutRepository(s3RepoName).setType(getRepositoryType().name()).setSettings(Settings.builder().put("base_path"`repositorySettingsParams.getBase_path()).put("region"`repositorySettingsParams.getRegion()).put("bucket"`repositorySettingsParams.getBucket())).get();" is 309.,137
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,runSnapshotBackup,Long Statement,The length of the statement "logger.info("Repository Name : <" + repositoryName + "> Snapshot Name : <"+ snapshotName+ "> Indices : <"+ config.getCommaSeparatedIndicesToBackup()+ "> \nRunning Snapshot now ... ");" is 183.,98
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,printSnapshotDetails,Long Statement,The length of the statement "long minuteDuration=(createSnapshotResponse.getSnapshotInfo().endTime() - createSnapshotResponse.getSnapshotInfo().startTime()) / (1000 * 60);" is 142.,127
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,printSnapshotDetails,Magic Number,The method contains a magic number: 1000,127
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,printSnapshotDetails,Magic Number,The method contains a magic number: 60,127
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,getTimer,Magic Number,The method contains a magic number: 1000,156
Netflix_Raigad,com.netflix.raigad.backup,SnapshotBackupManager,getCreateSnapshotResponse,Long Statement,The length of the statement "return esTransportClient.admin().cluster().prepareCreateSnapshot(repositoryName`snapshotName).setWaitForCompletion(config.waitForCompletionOfBackup()).setIndices(config.getCommaSeparatedIndicesToBackup().split(COMMA_SEPARATOR)).setIncludeGlobalState(config.includeGlobalStateDuringBackup()).setPartial(config.partiallyBackupIndices()).get();" is 341.,196
Netflix_Raigad,com.netflix.raigad.backup,S3RepositorySettingsParams,setBackupParams,Long Statement,The length of the statement "if (StringUtils.isEmpty(this.bucket)) throw new CreateRepositoryException("Backup Location is not set in configuration.");" is 122.,45
Netflix_Raigad,com.netflix.raigad.backup,S3RepositorySettingsParams,setRestoreParams,Long Statement,The length of the statement "if (StringUtils.isNotBlank(config.getRestoreSourceRepositoryRegion())) this.region=config.getRestoreSourceRepositoryRegion();" is 125.,55
Netflix_Raigad,com.netflix.raigad.backup,AbstractRepository,doesRepositoryExists,Long Statement,The length of the statement "ClusterStateResponse clusterStateResponse=esTransportClient.admin().cluster().prepareState().clear().setMetaData(true).get();" is 125.,57
Netflix_Raigad,com.netflix.raigad.backup,AbstractRepository,doesRepositoryExists,Long Statement,The length of the statement "if (repositoryMetaData.name().equalsIgnoreCase(repositoryName) && repositoryMetaData.type().equalsIgnoreCase(repositoryType.name())) {" is 134.,57
Netflix_Raigad,com.netflix.raigad.backup,AbstractRepository,doesRepositoryExists,Long Statement,The length of the statement "if (config.isDebugEnabled()) for ( RepositoryMetaData repositoryMetaData : repositoriesMetaData.repositories()) logger.debug("Repository <" + repositoryMetaData.name() + ">");" is 175.,57
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,execute,Long Statement,The length of the statement "runRestore(config.getRestoreRepositoryName()`config.getRestoreRepositoryType()`config.getRestoreSnapshotName()`config.getCommaSeparatedIndicesToRestore()`null`null);" is 165.,61
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Complex Method,Cyclomatic complexity of the method is 9,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Long Parameter List,The method has 6 parameters. ,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Long Statement,The length of the statement "String sourceRepoName=StringUtils.isBlank(sourceRepositoryName) ? config.getRestoreRepositoryName() : sourceRepositoryName;" is 123.,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Long Statement,The length of the statement "if (!repository.doesRepositoryExists(restoreRepositoryName`AbstractRepository.RepositoryType.valueOf(repoType.toLowerCase()))) {" is 128.,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Long Statement,The length of the statement "if (snapshots.isEmpty()) throw new RestoreBackupException("No available snapshots in <" + restoreRepositoryName + "> repository.");" is 131.,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,runRestore,Long Statement,The length of the statement "RestoreSnapshotResponse restoreSnapshotResponse=getRestoreSnapshotResponse(esTransportClient`commaSeparatedIndices`restoreRepositoryName`snapshotN`renamePattern`renameReplacement);" is 180.,87
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,getRestoreSnapshotResponse,Complex Conditional,The conditional expression (renamePattern != null && renameReplacement != null) && (!renamePattern.isEmpty() || !renameReplacement.isEmpty()) is complex.,169
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,getRestoreSnapshotResponse,Long Parameter List,The method has 6 parameters. ,169
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,getRestoreSnapshotResponse,Long Statement,The length of the statement "restoreSnapshotRequestBuilder=esTransportClient.admin().cluster().prepareRestoreSnapshot(restoreRepositoryName`snapshotN).setWaitForCompletion(true).setIndices(commaSeparatedIndices.split(COMMA_SEPARATOR));" is 206.,169
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,getRestoreSnapshotResponse,Long Statement,The length of the statement "restoreSnapshotRequestBuilder=esTransportClient.admin().cluster().prepareRestoreSnapshot(restoreRepositoryName`snapshotN).setWaitForCompletion(true);" is 149.,169
Netflix_Raigad,com.netflix.raigad.backup,RestoreBackupManager,getRestoreSnapshotResponse,Long Statement,The length of the statement "if ((renamePattern != null && renameReplacement != null) && (!renamePattern.isEmpty() || !renameReplacement.isEmpty())) {" is 121.,169
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Long Statement,The length of the statement "Assert.assertEquals(client0.admin().cluster().prepareGetSnapshots(repositoryName).setSnapshots(snapshotBackupManager.getSnapshotName("_all"`false)).get().getSnapshots().get(0).state()`SnapshotState.SUCCESS);" is 207.,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 50,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 2,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 50L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 50L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,testSimpleWorkflow,Magic Number,The method contains a magic number: 100L,115
Netflix_Raigad,com.netflix.raigad.backup,TestBackupRestore,wipeRepositories,Empty catch clause,The method has an empty catch block.,241
Netflix_Raigad,com.netflix.raigad.defaultimpl,StandardTuner,writeAllProperties,Complex Method,Cyclomatic complexity of the method is 13,47
Netflix_Raigad,com.netflix.raigad.defaultimpl,StandardTuner,writeAllProperties,Long Method,The method has 102 lines of code.,47
Netflix_Raigad,com.netflix.raigad.defaultimpl,StandardTuner,writeAllProperties,Magic Number,The method contains a magic number: 2,47
Netflix_Raigad,com.netflix.raigad.defaultimpl,StandardTuner,addExtraEsParams,Complex Conditional,The conditional expression raigadKey == null || esKey == null || esValue == null is complex.,181
Netflix_Raigad,com.netflix.raigad.defaultimpl,ElasticsearchProcessManager,readProcessStream,Magic Number,The method contains a magic number: 512,117
Netflix_Raigad,com.netflix.raigad.defaultimpl,ElasticsearchInstance,toString,Long Statement,The length of the statement "return String.format("Hostname: %s` InstanceId: %s` Cluster_: %s` Availability Zone : %s Region %s"`getHostName()`getInstanceId()`getCluster()`getAvailabilityZone()`getRegion());" is 178.,85
Netflix_Raigad,com.netflix.raigad.dataobjects,TestMasterNodeInfoMapper,testMasterNodeInformationObject,Long Statement,The length of the statement "String masterNodeInfo="[{\"id\":\"8sZZWYmmQaeNUKMq1S1uow\"`\"host\":\"es-test-useast1d-master-i-9e112345\"`\"ip\":\"10.111.22.333\"`\"node\":\"us-east-1d.i-9e112345\"}]";" is 170.,29
Netflix_Raigad,com.netflix.raigad.dataobjects,TestMasterNodeInfoMapper,testMasterNodeInformationObject,Long Statement,The length of the statement "List<MasterNodeInformation> myObjs=mapper.readValue(masterNodeInfo`new TypeReference<ArrayList<MasterNodeInformation>>(){" is 121.,29
Netflix_Raigad,com.netflix.raigad.monitoring,JvmStatsMonitor,execute,Complex Method,Cyclomatic complexity of the method is 12,58
Netflix_Raigad,com.netflix.raigad.monitoring,JvmStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,375
Netflix_Raigad,com.netflix.raigad.monitoring,JvmStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,375
Netflix_Raigad,com.netflix.raigad.monitoring,NodeHealthMonitor,getTimer,Magic Number,The method contains a magic number: 60,94
Netflix_Raigad,com.netflix.raigad.monitoring,NodeHealthMonitor,getTimer,Magic Number,The method contains a magic number: 1000,94
Netflix_Raigad,com.netflix.raigad.monitoring,FsStatsMonitor,execute,Magic Number,The method contains a magic number: 100,53
Netflix_Raigad,com.netflix.raigad.monitoring,FsStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,168
Netflix_Raigad,com.netflix.raigad.monitoring,FsStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,168
Netflix_Raigad,com.netflix.raigad.monitoring,OsStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,209
Netflix_Raigad,com.netflix.raigad.monitoring,OsStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,209
Netflix_Raigad,com.netflix.raigad.monitoring,SnapshotBackupMonitor,getTimer,Magic Number,The method contains a magic number: 3600,96
Netflix_Raigad,com.netflix.raigad.monitoring,SnapshotBackupMonitor,getTimer,Magic Number,The method contains a magic number: 1000,96
Netflix_Raigad,com.netflix.raigad.monitoring,ThreadPoolStatsMonitor,execute,Complex Method,Cyclomatic complexity of the method is 10,52
Netflix_Raigad,com.netflix.raigad.monitoring,ThreadPoolStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,284
Netflix_Raigad,com.netflix.raigad.monitoring,ThreadPoolStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,284
Netflix_Raigad,com.netflix.raigad.monitoring,TransportStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,151
Netflix_Raigad,com.netflix.raigad.monitoring,TransportStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,151
Netflix_Raigad,com.netflix.raigad.monitoring,HttpStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,116
Netflix_Raigad,com.netflix.raigad.monitoring,HttpStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,116
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,95
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,95
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateRefreshFlush,Long Identifier,The length of the field refreshAvgTimeInMillisPerRequest is 32.,152
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateRefreshFlush,Long Identifier,The length of the field flushAvgTimeInMillisPerRequest is 30.,152
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateRefreshFlush,Long Statement,The length of the statement "nodeIndicesStatsBean.refreshAvgTimeInMillisPerRequest=nodeIndicesStatsBean.refreshTotalTime / nodeIndicesStatsBean.refreshTotal;" is 128.,152
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateRefreshFlush,Long Statement,The length of the statement "nodeIndicesStatsBean.flushAvgTimeInMillisPerRequest=nodeIndicesStatsBean.flushTotalTime / nodeIndicesStatsBean.flushTotal;" is 122.,152
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateSearch,Long Identifier,The length of the field searchQueryAvgTimeInMillisPerRequest is 36.,180
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateSearch,Long Identifier,The length of the field searchFetchAvgTimeInMillisPerRequest is 36.,180
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateSearch,Long Statement,The length of the statement "nodeIndicesStatsBean.searchQueryAvgTimeInMillisPerRequest=nodeIndicesStatsBean.searchQueryTime / nodeIndicesStatsBean.searchQueryTotal;" is 135.,180
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateSearch,Long Statement,The length of the statement "nodeIndicesStatsBean.searchFetchAvgTimeInMillisPerRequest=nodeIndicesStatsBean.searchFetchTime / nodeIndicesStatsBean.searchFetchTotal;" is 135.,180
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Identifier,The length of the field getTotalAvgTimeInMillisPerRequest is 33.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Identifier,The length of the field getExistsAvgTimeInMillisPerRequest is 34.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Identifier,The length of the field getMissingAvgTimeInMillisPerRequest is 35.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Statement,The length of the statement "if (nodeIndicesStatsBean.getTotal != 0) nodeIndicesStatsBean.getTotalAvgTimeInMillisPerRequest=nodeIndicesStatsBean.getTime / nodeIndicesStatsBean.getTotal;" is 156.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Statement,The length of the statement "if (nodeIndicesStatsBean.getExistsTotal != 0) nodeIndicesStatsBean.getExistsAvgTimeInMillisPerRequest=nodeIndicesStatsBean.getExistsTime / nodeIndicesStatsBean.getExistsTotal;" is 175.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateGet,Long Statement,The length of the statement "nodeIndicesStatsBean.getMissingAvgTimeInMillisPerRequest=nodeIndicesStatsBean.getMissingTime / nodeIndicesStatsBean.getMissingTotal;" is 132.,229
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateIndexing,Long Identifier,The length of the field indexingAvgTimeInMillisPerRequest is 33.,293
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateIndexing,Long Identifier,The length of the field indexingDeleteAvgTimeInMillisPerRequest is 39.,293
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateIndexing,Long Statement,The length of the statement "nodeIndicesStatsBean.indexingAvgTimeInMillisPerRequest=nodeIndicesStatsBean.indexingIndexTimeInMillis / nodeIndicesStatsBean.indexingIndexTotal;" is 144.,293
Netflix_Raigad,com.netflix.raigad.monitoring,NodeIndicesStatsMonitor,updateIndexing,Long Statement,The length of the statement "nodeIndicesStatsBean.indexingDeleteAvgTimeInMillisPerRequest=nodeIndicesStatsBean.indexingDeleteTime / nodeIndicesStatsBean.indexingDeleteTotal;" is 144.,293
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,execute,Complex Method,Cyclomatic complexity of the method is 9,65
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,execute,Long Statement,The length of the statement "ClusterHealthStatus clusterHealthStatus=esTransportClient.admin().cluster().prepareHealth().setTimeout(MASTER_NODE_TIMEOUT).execute().get().getStatus();" is 152.,65
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,execute,Long Statement,The length of the statement "ClusterHealthResponse clusterHealthResponse=esTransportClient.admin().cluster().prepareHealth().execute().actionGet(MASTER_NODE_TIMEOUT);" is 137.,65
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,execute,Long Statement,The length of the statement "healthBean.eurekanodematch=(clusterHealthResponse.getNumberOfNodes() == discoveryClient.getApplication(config.getAppName()).getInstances().size()) ? 0 : 1;" is 155.,65
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,getTimer,Magic Number,The method contains a magic number: 60,156
Netflix_Raigad,com.netflix.raigad.monitoring,HealthMonitor,getTimer,Magic Number,The method contains a magic number: 1000,156
Netflix_Raigad,com.netflix.raigad.monitoring,ProcessStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,169
Netflix_Raigad,com.netflix.raigad.monitoring,ProcessStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,169
Netflix_Raigad,com.netflix.raigad.monitoring,EstimatedHistogram,EstimatedHistogram,Magic Number,The method contains a magic number: 90,42
Netflix_Raigad,com.netflix.raigad.monitoring,EstimatedHistogram,newOffsets,Magic Number,The method contains a magic number: 1.2,57
Netflix_Raigad,com.netflix.raigad.monitoring,EstimatedHistogram,mean,Long Statement,The length of the statement "if (buckets.get(lastBucket) > 0) throw new IllegalStateException("Unable to compute ceiling for max when histogram overflowed");" is 128.,169
Netflix_Raigad,com.netflix.raigad.monitoring,EstimatedHistogram,equals,Long Statement,The length of the statement "return Arrays.equals(getBucketOffsets()`that.getBucketOffsets()) && Arrays.equals(getBuckets(false)`that.getBuckets(false));" is 124.,264
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,AllCircuitBreakerStatsMonitor,Long Identifier,The length of the field allCircuitBreakerStatsReporter is 30.,49
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,execute,Complex Method,Cyclomatic complexity of the method is 9,56
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,execute,Long Identifier,The length of the field fieldDataLimitMaximumSizeInBytes is 32.,56
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,execute,Long Identifier,The length of the field requestLimitMaximumSizeInBytes is 30.,56
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,execute,Long Identifier,The length of the field allCircuitBreakerStatsReporter is 30.,56
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,getTimer,Magic Number,The method contains a magic number: 60,175
Netflix_Raigad,com.netflix.raigad.monitoring,AllCircuitBreakerStatsMonitor,getTimer,Magic Number,The method contains a magic number: 1000,175
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,RaigadServer,Long Parameter List,The method has 9 parameters. ,61
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Complex Method,Cyclomatic complexity of the method is 15,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(UpdateTribeSecuritySettings.JOB_NAME`UpdateTribeSecuritySettings.class`UpdateTribeSecuritySettings.getTimer(instanceManager));" is 144.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(UpdateSecuritySettings.JOB_NAME`UpdateSecuritySettings.class`UpdateSecuritySettings.getTimer(instanceManager));" is 129.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(RestoreBackupManager.JOBNAME`RestoreBackupManager.class`RestoreBackupManager.getTimer(config)`config.getRestoreTaskInitialDelayInSeconds());" is 167.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "logger.info("config.doesElasticsearchStartManually() is set to True`" + "hence Elasticsearch needs to be started manually. " + "Restore task needs to be started manually as well (if needed).");" is 193.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(ElasticsearchProcessMonitor.JOB_NAME`ElasticsearchProcessMonitor.class`ElasticsearchProcessMonitor.getTimer()`ES_MONITORING_INITIAL_DELAY);" is 166.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(SnapshotBackupManager.JOBNAME`SnapshotBackupManager.class`SnapshotBackupManager.getTimer(config)`ES_SNAPSHOT_INITIAL_DELAY);" is 151.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(ElasticsearchIndexManager.JOB_NAME`ElasticsearchIndexManager.class`ElasticsearchIndexManager.getTimer(config)`config.getAutoCreateIndexInitialStartDelaySeconds());" is 190.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(HealthMonitor.METRIC_NAME`HealthMonitor.class`HealthMonitor.getTimer("HealthMonitor")`ES_HEALTH_MONITOR_DELAY);" is 138.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(HealthMonitor.METRIC_NAME`HealthMonitor.class`HealthMonitor.getTimer("HealthMonitor")`ES_HEALTH_MONITOR_DELAY);" is 138.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(SnapshotBackupManager.JOBNAME`SnapshotBackupManager.class`SnapshotBackupManager.getTimer(config)`ES_SNAPSHOT_INITIAL_DELAY);" is 151.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(ElasticsearchIndexManager.JOB_NAME`ElasticsearchIndexManager.class`ElasticsearchIndexManager.getTimer(config)`config.getAutoCreateIndexInitialStartDelaySeconds());" is 190.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(HealthMonitor.METRIC_NAME`HealthMonitor.class`HealthMonitor.getTimer("HealthMonitor")`ES_HEALTH_MONITOR_DELAY);" is 138.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(ThreadPoolStatsMonitor.METRIC_NAME`ThreadPoolStatsMonitor.class`ThreadPoolStatsMonitor.getTimer("ThreadPoolStatsMonitor"));" is 141.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(TransportStatsMonitor.METRIC_NAME`TransportStatsMonitor.class`TransportStatsMonitor.getTimer("TransportStatsMonitor"));" is 137.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(NodeIndicesStatsMonitor.METRIC_NAME`NodeIndicesStatsMonitor.class`NodeIndicesStatsMonitor.getTimer("NodeIndicesStatsMonitor"));" is 145.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(ProcessStatsMonitor.METRIC_NAME`ProcessStatsMonitor.class`ProcessStatsMonitor.getTimer("ProcessStatsMonitor"));" is 129.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(AllCircuitBreakerStatsMonitor.METRIC_NAME`AllCircuitBreakerStatsMonitor.class`AllCircuitBreakerStatsMonitor.getTimer("AllCircuitBreakerStatsMonitor"));" is 169.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTask(SnapshotBackupMonitor.METRIC_NAME`SnapshotBackupMonitor.class`SnapshotBackupMonitor.getTimer("SnapshotBackupMonitor"));" is 137.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Long Statement,The length of the statement "scheduler.addTaskWithDelay(NodeHealthMonitor.METRIC_NAME`NodeHealthMonitor.class`NodeHealthMonitor.getTimer("NodeHealthMonitor")`ES_NODE_HEALTH_MONITOR_DELAY);" is 159.,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Magic Number,The method contains a magic number: 60,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Magic Number,The method contains a magic number: 1000,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Magic Number,The method contains a magic number: 60,82
Netflix_Raigad,com.netflix.raigad.startup,RaigadServer,initialize,Magic Number,The method contains a magic number: 1000,82
Netflix_Raigad,com.netflix.raigad.indexmanagement,ElasticsearchIndexManager,checkIndexRetention,Long Statement,The length of the statement "logger.info("Date {} for index {} is past the retention date of {}` deleting it"`indexDate`indexName`pastRetentionCutoffDate);" is 126.,156
Netflix_Raigad,com.netflix.raigad.indexmanagement,ElasticsearchIndexManager,preCreateIndex,Long Statement,The length of the statement "indexStatsMap.keySet().stream().filter(indexName -> indexMetadata.getIndexNameFilter().filter(indexName)).findFirst().ifPresent(indexName -> {" is 142.,177
Netflix_Raigad,com.netflix.raigad.indexmanagement,ElasticsearchIndexManager,createIndex,Long Statement,The length of the statement "if (!client.admin().indices().prepareExists(indexName).execute().actionGet(config.getAutoCreateIndexTimeout()).isExists()) {" is 124.,200
Netflix_Raigad,com.netflix.raigad.indexmanagement,IndexMetadata,IndexMetadata,Long Parameter List,The method has 5 parameters. ,61
Netflix_Raigad,com.netflix.raigad.indexmanagement,IndexMetadata,toString,Long Statement,The length of the statement "return String.format("{\"indexNamePattern\": \"%s\"` \"retentionPeriod\": \"%s\"` \"preCreate\": %b}"`indexNamePattern`retentionPeriod`preCreate);" is 146.,102
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testBadInputNoIndexName,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"retentionType\": \"monthly\"`\"retentionPeriod\": 20}]");" is 130.,14
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testBadInputNoRetention,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"retentionType\": \"monthly\"` \"indexName\": \"nf_errors_log\"}]");" is 140.,29
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testBadInputInvalidSymbols,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"retentionType\":\"monthly\"`\"indexName\":\"nf_errors_log\"`\"retentionPeriod?:6`?preCreate\":false}]");" is 177.,43
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testBadInputInvalidRetention,Long Statement,The length of the statement "IndexUtils.parseIndexMetadata("[{\"retentionType\": \"monthly\"` \"indexName\": \"nf_errors_log\"`\"retentionPeriod\":\"A\"}]");" is 128.,57
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testFiveMinuteRetention,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"indexNamePattern\": \"'nf_errors_log'YYYY\"`\"retentionPeriod\":\"PT5M\"}]");" is 150.,74
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testFiveMinuteRetention,Magic Number,The method contains a magic number: 5,74
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testOneHourRetention,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"indexNamePattern\": \"'nf_errors_log'YYYY\"`\"retentionPeriod\":\"PT1H\"}]");" is 150.,82
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,test18MonthRetention,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"indexNamePattern\": \"'nf_errors_log'YYYY\"`\"retentionPeriod\":\"P18M\"}]");" is 150.,90
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,test18MonthRetention,Magic Number,The method contains a magic number: 18,90
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testNamePatternOverridesRetentionType,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"indexNamePattern\": \"'nf_errors_log'YYYY\"`\"retentionType\":\"daily\"`\"retentionPeriod\":\"P18M\"}]");" is 178.,98
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testNamePatternOverridesIndexName,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[{\"indexNamePattern\": \"'nf_errors_log'YYYY\"`\"indexName\":\"errors\"`\"retentionPeriod\":\"P18M\"}]");" is 175.,106
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testMixedRetention,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[ { \"retentionType\": \"yearly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\" }`" + "{ \"retentionType\": \"monthly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\" }`" + "{ \"retentionType\": \"hourly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\"` \"preCreate\": \"true\" }`"+ "{ \"retentionType\": \"daily\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\"` \"preCreate\": \"false\" }]");" is 511.,114
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testMixedRetention,Magic Number,The method contains a magic number: 4,114
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testMixedRetention,Magic Number,The method contains a magic number: 2,114
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexMetadata,testMixedRetention,Magic Number,The method contains a magic number: 3,114
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[ { \"retentionType\": \"yearly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\" }`" + "{ \"retentionType\": \"monthly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\" }`" + "{ \"retentionType\": \"hourly\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\"` \"preCreate\": \"true\" }`"+ "{ \"retentionType\": \"hourly\"` \"retentionPeriod\": 40` \"indexName\": \"nf_errors_log\"` \"preCreate\": \"true\" }`"+ "{ \"retentionType\": \"daily\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log\"` \"preCreate\": \"false\" }]");" is 633.,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 2,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 3,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 4,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 1997,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 201603,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 20171026,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 2017111416,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testPastRetentionCutoffDate,Magic Number,The method contains a magic number: 2017111320,19
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testIndexNameToPreCreate,Long Statement,The length of the statement "List<IndexMetadata> indexMetadataList=IndexUtils.parseIndexMetadata("[ { \"retentionType\": \"yearly\"` \"retentionPeriod\": 20` \"indexName\": \"index\" }`" + "{ \"retentionType\": \"monthly\"` \"retentionPeriod\": 20` \"indexName\": \"0\" }`" + "{ \"retentionType\": \"hourly\"` \"retentionPeriod\": 20` \"indexName\": \"index1\"` \"preCreate\": \"true\" }`"+ "{ \"retentionType\": \"daily\"` \"retentionPeriod\": 20` \"indexName\": \"nf_errors_log_useast1\"` \"preCreate\": \"false\" }]");" is 492.,43
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testIndexNameToPreCreate,Magic Number,The method contains a magic number: 2,43
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestIndexUtils,testIndexNameToPreCreate,Magic Number,The method contains a magic number: 3,43
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement_NotActionable_NoIndex,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(0)).checkIndexRetention(any(Client.class)`anySet()`any(IndexMetadata.class)`any(DateTime.class));" is 136.,42
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement_NotActionable_NoIndex,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(0)).preCreateIndex(any(Client.class)`any(IndexMetadata.class)`any(DateTime.class));" is 122.,42
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement_NotActionable_NoRetentionPeriod,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(0)).checkIndexRetention(any(Client.class)`anySet()`any(IndexMetadata.class)`any(DateTime.class));" is 136.,61
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement_NotActionable_NoRetentionPeriod,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(0)).preCreateIndex(any(Client.class)`any(IndexMetadata.class)`any(DateTime.class));" is 122.,61
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement,Long Statement,The length of the statement "String serializedIndexMetadata="[{\"retentionType\": \"yearly\"` \"retentionPeriod\": 3` \"indexName\": \"nf_errors_log\"}]";" is 125.,80
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(1)).checkIndexRetention(any(Client.class)`anySet()`any(IndexMetadata.class)`any(DateTime.class));" is 136.,80
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(1)).deleteIndices(any(Client.class)`eq("nf_errors_log2012")`eq(AUTO_CREATE_INDEX_TIMEOUT));" is 130.,80
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(1)).deleteIndices(any(Client.class)`eq("nf_errors_log2013")`eq(AUTO_CREATE_INDEX_TIMEOUT));" is 130.,80
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testRunIndexManagement,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(0)).preCreateIndex(any(Client.class)`any(IndexMetadata.class)`any(DateTime.class));" is 122.,80
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Hourly,Long Statement,The length of the statement "String serializedIndexMetadata="[{\"preCreate\": false` \"retentionType\": \"hourly\"` \"retentionPeriod\": 2` \"indexName\": \"nf_errors_log\"}]";" is 147.,109
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Hourly,Long Statement,The length of the statement "Set<String> indices=new HashSet<>(Arrays.asList("nf_errors_log2017062210"`"nf_errors_log2017062211"`"nf_errors_log2017062212"`"nf_errors_log2017062213"`"nf_errors_log2017062214"));" is 180.,109
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Hourly,Long Statement,The length of the statement "elasticsearchIndexManager.checkIndexRetention(elasticsearchClient`indices`indexMetadata`new DateTime("2017-06-22T13:30Z"));" is 123.,109
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Hourly,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(1)).deleteIndices(any(Client.class)`eq("nf_errors_log2017062210")`eq(AUTO_CREATE_INDEX_TIMEOUT));" is 136.,109
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Overlapping,Long Statement,The length of the statement "String serializedIndexMetadata="[{\"preCreate\": false` \"retentionType\": \"hourly\"` \"retentionPeriod\": 2` \"indexName\": \"nf_errors_log\"}`" + "{\"preCreate\": false` \"retentionType\": \"yearly\"` \"retentionPeriod\": 3` \"indexName\": \"nf_errors_log201712\"}]";" is 270.,123
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Overlapping,Long Statement,The length of the statement "verify(elasticsearchIndexManager`times(2)).checkIndexRetention(any(Client.class)`anySet()`any(IndexMetadata.class)`any(DateTime.class));" is 136.,123
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,testCheckIndexRetention_Overlapping,Magic Number,The method contains a magic number: 2,123
Netflix_Raigad,com.netflix.raigad.indexmanagement,TestElasticsearchIndexManager,cleanUp,Long Statement,The length of the statement "ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName("com.netflix.raigad.scheduler:type=" + ElasticsearchIndexManager.class.getName()));" is 157.,146
Netflix_Raigad,com.netflix.raigad.indexmanagement.indexfilters,DatePatternIndexNameFilter,checkYear,Magic Number,The method contains a magic number: 10000,44
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Complex Conditional,The conditional expression !(asgInstance.getLifecycleState().equalsIgnoreCase("terminating") || asgInstance.getLifecycleState().equalsIgnoreCase("shutting-down") || asgInstance.getLifecycleState().equalsIgnoreCase("terminated")) is complex.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Identifier,The length of the identifier describeAutoScalingGroupsRequest is 32.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Identifier,The length of the identifier describeAutoScalingGroupsResult is 31.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Statement,The length of the statement "DescribeAutoScalingGroupsRequest describeAutoScalingGroupsRequest=new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames(autoScalingGroupNames);" is 154.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Statement,The length of the statement "DescribeAutoScalingGroupsResult describeAutoScalingGroupsResult=client.describeAutoScalingGroups(describeAutoScalingGroupsRequest);" is 131.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Statement,The length of the statement "if (!(asgInstance.getLifecycleState().equalsIgnoreCase("terminating") || asgInstance.getLifecycleState().equalsIgnoreCase("shutting-down") || asgInstance.getLifecycleState().equalsIgnoreCase("terminated"))) {" is 208.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembership,Long Statement,The length of the statement "logger.info("AWS returned the following instance ID's for {} ASG: {}"`autoScalingGroup.getAutoScalingGroupName()`StringUtils.join(asgInstanceIds`"`"));" is 151.,53
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getRacMembershipSize,Long Statement,The length of the statement "DescribeAutoScalingGroupsRequest asgReq=new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames(config.getASGName());" is 126.,91
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,addACL,Long Statement,The length of the statement "client.authorizeSecurityGroupIngress(new AuthorizeSecurityGroupIngressRequest().withGroupId(config.getACLGroupIdForVPC()).withIpPermissions(ipPermissions));" is 156.,123
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,removeACL,Long Statement,The length of the statement "client.revokeSecurityGroupIngress(new RevokeSecurityGroupIngressRequest().withGroupId(config.getACLGroupIdForVPC()).withIpPermissions(ipPermissions));" is 150.,156
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,listACL,Long Statement,The length of the statement "DescribeSecurityGroupsRequest describeSecurityGroupsRequest=new DescribeSecurityGroupsRequest().withGroupIds(config.getACLGroupIdForVPC());" is 139.,189
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,listACL,Long Statement,The length of the statement "DescribeSecurityGroupsRequest describeSecurityGroupsRequest=new DescribeSecurityGroupsRequest().withGroupNames(Arrays.asList(config.getACLGroupName()));" is 152.,189
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getACLPortMap,Complex Method,Cyclomatic complexity of the method is 8,229
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getACLPortMap,Long Statement,The length of the statement "DescribeSecurityGroupsRequest describeSecurityGroupsRequest=new DescribeSecurityGroupsRequest().withGroupIds(config.getACLGroupIdForVPC());" is 139.,229
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,getACLPortMap,Long Statement,The length of the statement "DescribeSecurityGroupsRequest describeSecurityGroupsRequest=new DescribeSecurityGroupsRequest().withGroupNames(Arrays.asList(config.getACLGroupName()));" is 152.,229
Netflix_Raigad,com.netflix.raigad.aws,AWSMembership,expandRacMembership,Long Statement,The length of the statement "DescribeAutoScalingGroupsRequest asgReq=new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames(config.getASGName());" is 126.,273
Netflix_Raigad,com.netflix.raigad.aws,UpdateSecuritySettings,getInstanceList,Long Statement,The length of the statement "List<String> tribeClusters=new ArrayList<String>(Arrays.asList(StringUtils.split(config.getCommaSeparatedTribeClusterNames()`"`")));" is 132.,118
Netflix_Raigad,com.netflix.raigad.aws,UpdateSecuritySettings,getTimer,Magic Number,The method contains a magic number: 120,133
Netflix_Raigad,com.netflix.raigad.aws,UpdateSecuritySettings,getTimer,Magic Number,The method contains a magic number: 1000,133
Netflix_Raigad,com.netflix.raigad.aws,UpdateSecuritySettings,getTimer,Magic Number,The method contains a magic number: 120,133
Netflix_Raigad,com.netflix.raigad.aws,UpdateSecuritySettings,getTimer,Magic Number,The method contains a magic number: 1000,133
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,execute,Complex Method,Cyclomatic complexity of the method is 11,76
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,execute,Long Statement,The length of the statement "logger.info("Adding IPs for {} on port {}: {}"`currentClusterName`transportPort`clusterInstancesMap.get(currentClusterName));" is 125.,76
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,execute,Long Statement,The length of the statement "logger.info("Adding IPs for {} on port {}: {}"`currentClusterName`clusterPortMap.get(currentClusterName)`clusterInstancesMap.get(currentClusterName));" is 150.,76
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,execute,Long Statement,The length of the statement "membership.addACL(clusterInstancesMap.get(currentClusterName)`clusterPortMap.get(currentClusterName)`clusterPortMap.get(currentClusterName));" is 141.,76
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,initializeClusterPortMap,Magic Number,The method contains a magic number: 2,148
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,getTimer,Magic Number,The method contains a magic number: 120,207
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,getTimer,Magic Number,The method contains a magic number: 1000,207
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,getTimer,Magic Number,The method contains a magic number: 120,207
Netflix_Raigad,com.netflix.raigad.aws,UpdateTribeSecuritySettings,getTimer,Magic Number,The method contains a magic number: 1000,207
