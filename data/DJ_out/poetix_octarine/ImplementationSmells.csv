Project Name,Package Name,Type Name,Method Name,Implementation Smell,Cause of the Smell,Method start line no
poetix_octarine,com.codepoetics.octarine.functional.paths,PathTest,paths_compose,Long Statement,The length of the statement "Path<Map<String`List<Map<Class<?>`List<String>>>>`String> path=Path.<String`List<Map<Class<?>`List<String>>>>toKey("a").join(Path.toIndex(3)).join(Path.<Class<?>`List<String>>toKey(String.class)).join(Path.toIndex(2)).join(Path.<String`String>to(s -> Optional.of(s.substring(2`1))`"thirdChar"));" is 295.,14
poetix_octarine,com.codepoetics.octarine.functional.paths,PathTest,paths_compose,Magic Number,The method contains a magic number: 3,14
poetix_octarine,com.codepoetics.octarine.functional.paths,PathTest,paths_compose,Magic Number,The method contains a magic number: 2,14
poetix_octarine,com.codepoetics.octarine.functional.paths,PathTest,paths_compose,Magic Number,The method contains a magic number: 2,14
poetix_octarine,com.codepoetics.octarine.functional.matching,MatcherBuilder,matching,Long Parameter List,The method has 5 parameters. ,50
poetix_octarine,com.codepoetics.octarine.functional.matching,MatcherBuilder,matching,Long Parameter List,The method has 6 parameters. ,58
poetix_octarine,com.codepoetics.octarine.functional.matching,MatchingExtractorTest,dispatches_on_predicates_and_present_keys,Magic Number,The method contains a magic number: 4,56
poetix_octarine,com.codepoetics.octarine.functional.matching,MatchingExtractorTest,dispatches_on_predicates_and_present_keys,Magic Number,The method contains a magic number: 5,56
poetix_octarine,com.codepoetics.octarine.functional.matching,MatchingExtractorTest,dispatches_on_paths,Long Statement,The length of the statement "MatchingExtractor<Record`String> matchingExtractor=MatchingExtractor.build(m -> m.matching(Person.address.join(Address.addressLines).join(Path.toIndex(1))`s -> "Lives in " + s));" is 178.,68
poetix_octarine,com.codepoetics.octarine.functional.consumers,C5,accept,Long Parameter List,The method has 5 parameters. ,4
poetix_octarine,com.codepoetics.octarine.functional.tuples,T3,third,Magic Number,The method contains a magic number: 2,41
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,T5,Long Parameter List,The method has 5 parameters. ,15
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,unpacker,Long Parameter List,The method has 5 parameters. ,24
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,third,Magic Number,The method contains a magic number: 2,48
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,fourth,Magic Number,The method contains a magic number: 3,56
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,fifth,Magic Number,The method contains a magic number: 4,64
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,of,Long Parameter List,The method has 5 parameters. ,72
poetix_octarine,com.codepoetics.octarine.functional.tuples,T5,equals,Long Statement,The length of the statement "return Objects.equals(a`other.a) && Objects.equals(b`other.b) && Objects.equals(c`other.c)&& Objects.equals(d`other.d)&& Objects.equals(e`other.e);" is 147.,128
poetix_octarine,com.codepoetics.octarine.functional.tuples,Tuple,of,Long Parameter List,The method has 5 parameters. ,27
poetix_octarine,com.codepoetics.octarine.functional.tuples,T4,third,Magic Number,The method contains a magic number: 2,44
poetix_octarine,com.codepoetics.octarine.functional.tuples,T4,fourth,Magic Number,The method contains a magic number: 3,52
poetix_octarine,com.codepoetics.octarine.functional.functions,F5,of,Long Parameter List,The method has 5 parameters. ,23
poetix_octarine,com.codepoetics.octarine.functional.functions,F5,unsafe,Long Parameter List,The method has 5 parameters. ,43
poetix_octarine,com.codepoetics.octarine.functional.functions,F5,apply,Long Parameter List,The method has 5 parameters. ,47
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Statement,The length of the statement "return Extractor.from(input -> first.test(input) && second.test(input)`input -> receiver.apply(first.extract(input)`second.extract(input)));" is 140.,19
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Statement,The length of the statement "return Extractor.from(input -> extractorA.test(input) && extractorB.test(input) && extractorC.test(input)`input -> receiver.apply(extractorA.extract(input)`extractorB.extract(input)`extractorC.extract(input)));" is 210.,28
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Parameter List,The method has 5 parameters. ,38
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Statement,The length of the statement "return Extractor.from(input -> extractorA.test(input) && extractorB.test(input) && extractorC.test(input)&& extractorD.test(input)`input -> receiver.apply(extractorA.extract(input)`extractorB.extract(input)`extractorC.extract(input)`extractorD.extract(input)));" is 261.,38
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Parameter List,The method has 6 parameters. ,50
poetix_octarine,com.codepoetics.octarine.functional.extractors,Extractors,join,Long Statement,The length of the statement "return Extractor.from(input -> extractorA.test(input) && extractorB.test(input) && extractorC.test(input)&& extractorD.test(input)&& extractorE.test(input)`input -> receiver.apply(extractorA.extract(input)`extractorB.extract(input)`extractorC.extract(input)`extractorD.extract(input)`extractorE.extract(input)));" is 312.,50
poetix_octarine,com.codepoetics.octarine.functional.lenses,OptionalLens,intoPMap,Long Statement,The length of the statement "return of(( PMap<K`V> m) -> Optional.ofNullable(m.get(key))`( PMap<K`V> m` Optional<V> v) -> v.isPresent() ? m.plus(key`v.get()) : m.minus(key));" is 145.,56
poetix_octarine,com.codepoetics.octarine.functional.lenses,OptionalLens,intoPVector,Long Statement,The length of the statement "return of(ts -> index < ts.size() ? Optional.ofNullable(ts.get(index)) : Optional.empty()`( PVector<T> ts` Optional<T> t) -> t.isPresent() ? ts.with(index`t.get()) : ts.with(index`null));" is 187.,63
poetix_octarine,com.codepoetics.octarine.functional.lenses,OptionalLens,join,Long Statement,The length of the statement "return of(( T t) -> get(t).flatMap(next::get)`( T t` Optional<V2> v2) -> set(t`Optional.of(next.set(get(t).orElseGet(missingValueSupplier)`v2))));" is 146.,90
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliterator,over,Long Parameter List,The method has 5 parameters. ,10
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliterator,KeyMatchingSpliterator,Long Parameter List,The method has 5 parameters. ,32
poetix_octarine,com.codepoetics.octarine.joins,Index,matchedSublists,Long Statement,The length of the statement "return StreamSupport.stream(KeyMatchingSpliterator.over(comparator`entrySpliterator()`other.entrySpliterator()`Collections.emptySet()`Collections.emptySet())`false);" is 165.,171
poetix_octarine,com.codepoetics.octarine.joins,IndexCollector,on,Long Statement,The length of the statement "return Collector.of(() -> new TreeMap<>(comparator)`(map`element) -> map.computeIfAbsent(key.apply(element)`k -> new HashSet<>()).add(element)`IndexCollector::destructiveMergeMaps);" is 181.,11
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereAllKeysMatch,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,19
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereAllKeysMatch,Magic Number,The method contains a magic number: 2,19
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereAllKeysMatch,Magic Number,The method contains a magic number: 3,19
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereAllKeysMatch,Magic Number,The method contains a magic number: 2,19
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereAllKeysMatch,Magic Number,The method contains a magic number: 3,19
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereKeysMismatch,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,42
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereKeysMismatch,Magic Number,The method contains a magic number: 2,42
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereKeysMismatch,Magic Number,The method contains a magic number: 4,42
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereKeysMismatch,Magic Number,The method contains a magic number: 2,42
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereKeysMismatch,Magic Number,The method contains a magic number: 4,42
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnLeft,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,65
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnLeft,Magic Number,The method contains a magic number: 2,65
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnLeft,Magic Number,The method contains a magic number: 3,65
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnLeft,Magic Number,The method contains a magic number: 2,65
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnLeft,Magic Number,The method contains a magic number: 3,65
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnRight,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,87
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnRight,Magic Number,The method contains a magic number: 2,87
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereMoreKeysOnRight,Magic Number,The method contains a magic number: 2,87
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereLeftEmpty,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,109
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereRightEmpty,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,129
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereRightEmpty,Magic Number,The method contains a magic number: 2,129
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereRightEmpty,Magic Number,The method contains a magic number: 3,129
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereRightEmpty,Magic Number,The method contains a magic number: 2,129
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsPairsWhereRightEmpty,Magic Number,The method contains a magic number: 3,129
poetix_octarine,com.codepoetics.octarine.joins,KeyMatchingSpliteratorTest,returnsEmptyWhereBothEmpty,Long Statement,The length of the statement "KeyMatchingSpliterator<String`Integer`String> spliterator=KeyMatchingSpliterator.over(Comparator.naturalOrder()`left.entrySet().spliterator()`right.entrySet().spliterator()`0`"");" is 179.,150
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,oneToManyJoin,Long Statement,The length of the statement "Index<Character`String> right=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 127.,19
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,oneToManyJoin,Long Statement,The length of the statement "assertThat(left.oneToMany(right).collect(Collectors.toList())`hasItems(T2.of("apple"`setOf("apex"`"aardvaark"))`T2.of("banana"`setOf("butane"`"banter"))`T2.of("carrot"`setOf("capybara"`"catamite"))));" is 200.,19
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictOneToManyJoin,Long Statement,The length of the statement "Index<Character`String> right=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 127.,30
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictOneToManyJoin,Long Statement,The length of the statement "assertThat(left.strictOneToMany(right).collect(Collectors.toList())`hasItems(T2.of("apple"`setOf("apex"`"aardvaark"))`T2.of("banana"`setOf("butane"`"banter"))`T2.of("carrot"`setOf("capybara"`"catamite"))));" is 206.,30
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictOneToManyJoinWithMissingLeft,Long Statement,The length of the statement "Index<Character`String> right=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 127.,41
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictOneToManyJoinWithDuplicateLeft,Long Statement,The length of the statement "Index<Character`String> right=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 127.,49
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,manyToOneJoin,Long Statement,The length of the statement "Index<Character`String> left=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 126.,57
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,manyToOneJoin,Long Statement,The length of the statement "assertThat(left.manyToOne(right).collect(Collectors.toList())`hasItems(T2.of("aardvaark"`"apple")`T2.of("apex"`"apple")`T2.of("butane"`"banana")`T2.of("banter"`"banana")`T2.of("capybara"`"carrot")`T2.of("catamite"`"carrot")));" is 226.,57
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictManyToOneJoin,Long Statement,The length of the statement "Index<Character`String> left=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 126.,71
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictManyToOneJoin,Long Statement,The length of the statement "assertThat(left.strictManyToOne(right).collect(Collectors.toList())`hasItems(T2.of("aardvaark"`"apple")`T2.of("apex"`"apple")`T2.of("butane"`"banana")`T2.of("banter"`"banana")`T2.of("capybara"`"carrot")`T2.of("catamite"`"carrot")));" is 232.,71
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictManyToOneJoinWithMissingRight,Long Statement,The length of the statement "Index<Character`String> left=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 126.,85
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,strictManyToOneJoinWithDuplicateRight,Long Statement,The length of the statement "Index<Character`String> left=Index.on(Stream.of("capybara"`"aardvaark"`"catamite"`"banter"`"apex"`"butane")`indexOnFirstChar);" is 126.,93
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,oneToOneJoin,Long Statement,The length of the statement "assertThat(left.strictOneToOne(right).collect(Collectors.toList())`hasItems(T2.of("apple"`"artifice")`T2.of("banana"`"banausic")`T2.of("carrot"`"catamorphism")));" is 162.,101
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,leftOuterJoin,Long Statement,The length of the statement "assertThat(left.leftOuterJoin(right).collect(Collectors.toList())`hasItems(T2.of("apple"`Optional.empty())`T2.of("banana"`Optional.of("banausic"))`T2.of("banana"`Optional.of("ballistic"))`T2.of("carrot"`Optional.of("catamorphism"))));" is 234.,144
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,rightOuterJoin,Long Statement,The length of the statement "assertThat(left.rightOuterJoin(right).collect(Collectors.toList())`hasItems(T2.of(Optional.of("banana")`"banausic")`T2.of(Optional.of("banana")`"ballistic")`T2.of(Optional.of("carrot")`"catamorphism")`T2.of(Optional.empty()`"dirigible")));" is 239.,156
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,outerJoin,Long Statement,The length of the statement "assertThat(left.outerJoin(right).collect(Collectors.toList())`hasItems(T2.of(Optional.of("apple")`Optional.empty())`T2.of(Optional.of("banana")`Optional.of("banausic"))`T2.of(Optional.of("banana")`Optional.of("ballistic"))`T2.of(Optional.of("carrot")`Optional.of("catamorphism"))`T2.of(Optional.empty()`Optional.of("dirigible"))));" is 331.,168
poetix_octarine,com.codepoetics.octarine.joins,IndexTest,innerJoin,Long Statement,The length of the statement "assertThat(left.innerJoin(right).collect(Collectors.toList())`hasItems(T2.of("apple"`"atrophy")`T2.of("apple"`"anomie")`T2.of("banana"`"ballistic")`T2.of("banana"`"banausic")`T2.of("bazooka"`"ballistic")`T2.of("bazooka"`"banausic")`T2.of("carrot"`"copious")`T2.of("catalepsy"`"copious")));" is 289.,181
poetix_octarine,com.codepoetics.octarine.joins,RecordJoinerTest,three_way_join,Long Statement,The length of the statement "List<Record> joined=RecordJoins.join(RecordJoins.join(books).on(authorId).to(id).manyToOne(authors)).on(publisherId).to(id).manyToOne(publishers).map(r -> r.select(publisherName`authorName`bookName)).filter(authorName.is("Alan Goodyear")).collect(Collectors.toList());" is 268.,77
poetix_octarine,com.codepoetics.octarine.joins,RecordJoinerTest,three_way_join,Long Statement,The length of the statement "assertThat(joined`CoreMatchers.hasItems($$(bookName.of("Amorous Encounters")`authorName.of("Alan Goodyear")`publisherName.of("Bills And Moon"))`$$(bookName.of("The Cromulence Of Truths")`authorName.of("Alan Goodyear")`publisherName.of("Servo"))));" is 247.,77
poetix_octarine,com.codepoetics.octarine.joins,RecordJoinerTest,one_to_many_join,Long Statement,The length of the statement "Record joined=RecordJoins.join(authors).on(id).to(authorId).oneToMany(books`authored).filter(authorName.is("Alan Goodyear")).findFirst().get();" is 143.,103
poetix_octarine,com.codepoetics.octarine,OctarineTest,dollar_methods,Long Statement,The length of the statement "Record completePerson=$$(personWithNumbers`address.of(addressLines.of("23 Acacia Avenue"`"Sunderland")`postcode.of("VB6 5UX")));" is 128.,17
poetix_octarine,com.codepoetics.octarine,OctarineTest,dollar_methods,Long Statement,The length of the statement "assertThat(completePerson`ARecord.instance().with(name`"Peter Warlock").with(age`43).with(phoneNumbers`HashTreePMap.from(expectedNumbers)).with(address`$$(addressLines.of("23 Acacia Avenue"`"Sunderland")`postcode.of("VB6 5UX"))));" is 230.,17
poetix_octarine,com.codepoetics.octarine,OctarineTest,dollar_methods,Magic Number,The method contains a magic number: 43,17
poetix_octarine,com.codepoetics.octarine,OctarineTest,dollar_methods,Magic Number,The method contains a magic number: 43,17
poetix_octarine,com.codepoetics.octarine.records,MapKey,of,Long Parameter List,The method has 6 parameters. ,43
poetix_octarine,com.codepoetics.octarine.records,MapKey,of,Long Parameter List,The method has 8 parameters. ,52
poetix_octarine,com.codepoetics.octarine.records,MapKey,of,Long Parameter List,The method has 10 parameters. ,63
poetix_octarine,com.codepoetics.octarine.records,MapKey,of,Long Parameter List,The method has 12 parameters. ,75
poetix_octarine,com.codepoetics.octarine.records,Key,assertValid,Long Statement,The length of the statement "return OptionalLens.of(valid -> valid.get(this)`(valid`newValue) -> schema.extract(newValue.map(value -> valid.with(of(value))).orElseGet(() -> valid.without(this))));" is 167.,51
poetix_octarine,com.codepoetics.octarine.records,Record,of,Long Statement,The length of the statement "return new HashRecord(HashTreePMap.from(values.filter(v -> null != v.value()).collect(Collectors.toMap(Value::key`Value::value))));" is 131.,34
poetix_octarine,com.codepoetics.octarine.records,ValidationTest,schemas_validate_valid_records,Long Statement,The length of the statement "Validation<Person> validationResult=Person.schema.validate(Person.name.of("Alice Cowley")`Person.age.of(42)`Person.favouriteColour.of(Color.CYAN)`Person.address.of(Address.addressLines.of("12 Penguin Way"`"HR9 5BH")));" is 218.,16
poetix_octarine,com.codepoetics.octarine.records,ValidationTest,schemas_validate_valid_records,Magic Number,The method contains a magic number: 42,16
poetix_octarine,com.codepoetics.octarine.records,ValidationTest,schemas_collect_validation_errors,Long Statement,The length of the statement "Validation<Person> validationResult=Person.schema.validate(Person.name.of("Eric")`Person.age.of(-2)`Person.address.of(Address.addressLines.of("12 Penguin Way"`"HR9 5BH")));" is 172.,31
poetix_octarine,com.codepoetics.octarine.records,ValidationTest,schemas_collect_validation_errors,Magic Number,The method contains a magic number: 2,31
poetix_octarine,com.codepoetics.octarine.records,RecordTest,getKeysFromRecord,Long Statement,The length of the statement "assertThat(testRecord.get(address).flatMap(address -> address.get(addressLines)).get()`hasItems("23 Acacia Avenue"`"Sunderland"`"VB6 5UX"));" is 140.,47
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses,Long Statement,The length of the statement "Lens<Record`String> secondLineOfAddress=address.assertPresent().join(addressLines.assertPresent()).join(Lens.intoPVector(1));" is 125.,55
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses,Long Statement,The length of the statement "assertThat(secondLineOfAddress.set(testRecord`"Cirencester")`equalTo($$(name.of("Arthur Putey")`age.of(43)`address.of($$(addressLines.of("23 Acacia Avenue"`"Cirencester"`"VB6 5UX"))))));" is 186.,55
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses,Magic Number,The method contains a magic number: 43,55
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses_on_valid_records,Long Statement,The length of the statement "Lens<Record`PVector<String>> linesLens=Person.address.assertPresent().join(Address.addressLines.assertValidPresent(Address.schema));" is 132.,73
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses_on_valid_records,Long Statement,The length of the statement "assertThat(linesLens.set(validTestRecord`TreePVector.from(Arrays.asList("1 Mouse Street"`"Mouseville"`"M11 T22")))`equalTo($$(Person.name.of("Tom Cat")`Person.age.of(9)`Person.address.of(Address.addressLines.of("1 Mouse Street"`"Mouseville"`"M11 T22")))));" is 256.,73
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses_on_valid_records,Long Statement,The length of the statement "assertThat(secondLineOfValidAddress.set(validTestRecord`"Big Town")`equalTo($$(Person.name.of("Tom Cat")`Person.age.of(9)`Person.address.of(Address.addressLines.of("1 Cat Road"`"Big Town"`"T11 M22")))));" is 203.,73
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses_on_valid_records,Magic Number,The method contains a magic number: 9,73
poetix_octarine,com.codepoetics.octarine.records,RecordTest,keys_are_lenses_on_valid_records,Magic Number,The method contains a magic number: 9,73
poetix_octarine,com.codepoetics.octarine.records,RecordTest,reading_from_a_value,Long Statement,The length of the statement "Function<String`Record> reader=Record.reader(firstChar.reading(F2.of(String::charAt`0))`secondChar.reading(F2.of(String::charAt`1))`thirdChar.reading(F2.of(String::charAt`2)));" is 176.,116
poetix_octarine,com.codepoetics.octarine.records,RecordTest,reading_from_a_value,Magic Number,The method contains a magic number: 2,116
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Long Statement,The length of the statement "MutableRecord mutable=$$(Person.name.of("Dominic")`Person.age.of(39)`Person.favouriteColour.of(Color.RED)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP"))).mutable();" is 187.,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Long Statement,The length of the statement "assertThat(mutable.immutable()`equalTo($$(Person.name.of("Dominic")`Person.age.of(40)`Person.favouriteColour.of(Color.GRAY))));" is 127.,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 39,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 40,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 40,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 40,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 40,17
poetix_octarine,com.codepoetics.octarine.records,MutableRecordTest,mutable_records_capture_additions_and_removals,Magic Number,The method contains a magic number: 40,17
poetix_octarine,com.codepoetics.octarine.jdbc,TableMapping,createInsertSql,Long Statement,The length of the statement "return String.format("INSERT INTO %s (%s) VALUES (%s)"`tableName`String.join("`"`columnNameMap.values())`String.join("`"`columnNameMap.values().stream().map(v -> "?").collect(Collectors.toList())));" is 198.,69
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 2,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 1000,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 3,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 56L,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 4,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 1000,61
poetix_octarine,com.codepoetics.octarine.jdbc,TupleRowMappingTest,mapResultSetToTuple,Magic Number,The method contains a magic number: 56L,61
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,maps_resultset_to_record,Magic Number,The method contains a magic number: 23L,26
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,maps_resultset_to_record,Magic Number,The method contains a magic number: 2,26
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,maps_resultset_to_record,Magic Number,The method contains a magic number: 23L,26
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,omits_nulls,Magic Number,The method contains a magic number: 23L,37
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,omits_nulls,Magic Number,The method contains a magic number: 2,37
poetix_octarine,com.codepoetics.octarine.jdbc,RecordRowMapperTest,omits_nulls,Magic Number,The method contains a magic number: 23L,37
poetix_octarine,com.codepoetics.octarine.bson.serialisation,BsonRecordSerialiser,applyUnsafe,Long Statement,The length of the statement "List<BsonElement> elems=serialiserMap.entrySet().stream().filter(e -> e.getKey().get(record).isPresent()).map(e -> ((Function<Object`BsonElement>)serialiserMap.get(e.getKey())).apply(e.getKey().get(record).get())).collect(Collectors.toList());" is 243.,138
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_to_bson,Magic Number,The method contains a magic number: 42,32
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_to_bson,Magic Number,The method contains a magic number: 666,32
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_to_bson,Magic Number,The method contains a magic number: 42,32
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_to_bson,Magic Number,The method contains a magic number: 666,32
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_with_null_values_to_bson,Empty catch clause,The method has an empty catch block.,46
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_with_null_values_to_bson,Magic Number,The method contains a magic number: 42,46
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,write_map_with_null_values_to_bson,Magic Number,The method contains a magic number: 42,46
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,serialise_double,Magic Number,The method contains a magic number: 0.0001,95
poetix_octarine,com.codepoetics.octarine.bson,SerialisationTest,serialise_object_id,Magic Number,The method contains a magic number: 0xffffff,134
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,read_map_from_bson,Magic Number,The method contains a magic number: 42,36
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,read_map_from_bson,Magic Number,The method contains a magic number: 666,36
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,read_map_from_bson,Magic Number,The method contains a magic number: 42,36
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,read_map_from_bson,Magic Number,The method contains a magic number: 666,36
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,deserialise_double,Magic Number,The method contains a magic number: 0.0001,84
poetix_octarine,com.codepoetics.octarine.bson,DeserialisationTest,deserialise_object_id,Magic Number,The method contains a magic number: 0xffffff,126
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record,Long Statement,The length of the statement "BsonRecordDeserialiser deserialiser=BsonRecordDeserialiser.builder().readString(Person.name).readInteger(Person.age).get();" is 123.,37
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record,Magic Number,The method contains a magic number: 39,37
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record,Magic Number,The method contains a magic number: 39,37
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record_when_field_names_do_not_match_key_names,Long Statement,The length of the statement "BsonRecordDeserialiser deserialiser=BsonRecordDeserialiser.builder().readString(Person.name`"foo").readInteger(Person.age`"bar").get();" is 135.,55
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record_when_field_names_do_not_match_key_names,Magic Number,The method contains a magic number: 39,55
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record_when_field_names_do_not_match_key_names,Magic Number,The method contains a magic number: 39,55
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_nested_bson_to_record,Long Statement,The length of the statement "BsonRecordDeserialiser addressDeserialiser=BsonRecordDeserialiser.builder().readList(Address.addressLines`BsonDeserialisers.ofString).get();" is 140.,73
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_nested_bson_to_record,Long Statement,The length of the statement "BsonRecordDeserialiser deserialiser=BsonRecordDeserialiser.builder().readString(Person.name).readInteger(Person.age).readValidRecord(Person.address`addressDeserialiser.validAgainst(Address.schema)).get();" is 204.,73
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_nested_bson_to_record,Magic Number,The method contains a magic number: 39,73
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_nested_bson_to_record,Magic Number,The method contains a magic number: 39,73
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record_with_custom_type,Long Statement,The length of the statement "BsonRecordDeserialiser deserialiser=BsonRecordDeserialiser.builder().readString(Person.name).readInteger(Person.age).read(Person.favouriteColour`Person.colourFromBson).get();" is 174.,107
poetix_octarine,com.codepoetics.octarine.bson,BsonToRecord,convert_bson_to_record_with_custom_type,Magic Number,The method contains a magic number: 39,107
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_basic_record_to_bson,Magic Number,The method contains a magic number: 39,30
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_basic_record_to_bson,Magic Number,The method contains a magic number: 39,30
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_to_bson_when_field_names_do_not_match_key_names,Long Statement,The length of the statement "BsonRecordSerialiser serializer=BsonRecordSerialiser.builder().writeString(Person.name`"foo").writeInteger(Person.age`"bar").get();" is 131.,46
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_to_bson_when_field_names_do_not_match_key_names,Magic Number,The method contains a magic number: 39,46
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_to_bson_when_field_names_do_not_match_key_names,Magic Number,The method contains a magic number: 39,46
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_sub_record_to_bson,Long Statement,The length of the statement "Record person=Record.of(Person.name.of("Dominic")`Person.age.of(39)`Person.address.of(Address.addressLines.of(ADDRESS_LINES)));" is 127.,62
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_sub_record_to_bson,Long Statement,The length of the statement "BsonRecordSerialiser addressSerialiser=BsonRecordSerialiser.builder().writeList(Address.addressLines`BsonSerialisers.toString).get();" is 133.,62
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_sub_record_to_bson,Long Statement,The length of the statement "BsonRecordSerialiser serializer=BsonRecordSerialiser.builder().writeString(Person.name).writeInteger(Person.age).write(Person.address`addressSerialiser).get();" is 159.,62
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_sub_record_to_bson,Magic Number,The method contains a magic number: 39,62
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_sub_record_to_bson,Magic Number,The method contains a magic number: 39,62
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_custom_type_to_bson,Long Statement,The length of the statement "BsonRecordSerialiser serializer=BsonRecordSerialiser.builder().writeString(Person.name).writeInteger(Person.age).write(Person.favouriteColour`Person.colourToBson).get();" is 169.,91
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_custom_type_to_bson,Magic Number,The method contains a magic number: 39,91
poetix_octarine,com.codepoetics.octarine.bson,RecordToBson,convert_record_with_custom_type_to_bson,Magic Number,The method contains a magic number: 39,91
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,matches_record_with_property_matchers,Long Statement,The length of the statement "assertThat(person`ARecord.validAgainst(Person.schema).with(Person.name`"Arthur Putey").with(Person.age`42).with(Person.address.join(Address.addressLines).join(Path.toIndex(0))`"62 Acacia Avenue").with(Person.address`ARecord.validAgainst(Address.schema).with(Address.postcode`"VB6 5UX")));" is 288.,73
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,matches_record_with_property_matchers,Magic Number,The method contains a magic number: 42,73
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,lists_expected_properties_in_self_description,Long Statement,The length of the statement "Matcher<Record> matcher=ARecord.validAgainst(Person.schema).with(Person.name`"Hubert Cumberdale").with(Person.age`greaterThan(23)).with(Person.address.join(Address.postcode)`"HR9 5BH");" is 185.,98
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,lists_expected_properties_in_self_description,Magic Number,The method contains a magic number: 23,98
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,deserialise_validate_update_serialise,Long Statement,The length of the statement "Record record=Person.reader.fromString("{\"name\": \"Arthur Putey\"`\n" + "" + " \"age\": 42`\n"+ " \"address\": {\n"+ " \"addressLines\": [\"59 Broad Street\"` \"Cirencester\"]`\n"+ " \"postcode\": \"RA8 81T\"\n"+ " }\n"+ "}");" is 228.,126
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,deserialise_validate_update_serialise,Long Statement,The length of the statement "assertThat(record`ARecord.validAgainst(Person.schema).with(Person.name`"Arthur Putey").with(Person.age`42).with(Person.address.join(Address.addressLines).join(Path.toIndex(0))`"59 Broad Street").with(Person.address`ARecord.validAgainst(Address.schema).with(Address.postcode`"RA8 81T")));" is 287.,126
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,deserialise_validate_update_serialise,Long Statement,The length of the statement "assertThat(Person.writer.toString(changed)`equalTo("{\"name\":\"Arthur Putey\"`" + "" + "\"age\":43`"+ "\"address\":{"+ "\"addressLines\":[\"59 Broad Street\"`\"Cirencester\"]`"+ "\"postcode\":\"RA8 81T\""+ "}}"));" is 214.,126
poetix_octarine,com.codepoetics.octarine.matchers,ARecordTest,deserialise_validate_update_serialise,Magic Number,The method contains a magic number: 42,126
poetix_octarine,com.codepoetics.octarine.json.serialisation,RecordSerialiser,unsafeAccept,Long Statement,The length of the statement "serialiserMap.keySet().forEach(k -> k.get(record).ifPresent(value -> ((BiConsumer<JsonGenerator`Object>)serialiserMap.get(k)).accept(generator`value)));" is 152.,134
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_person_as_json,Long Statement,The length of the statement "String json=Person.serialiser.toString($$(Person.name.of("Dominic")`Person.age.of(39)`Person.favouriteColour.of(Color.RED)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP"))));" is 195.,33
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_person_as_json,Long Statement,The length of the statement "assertThat(json`equalTo("{\"name\":\"Dominic\"`\"age\":39`\"favourite colour\":\"0xFF0000\"`\"address\":{\"addressLines\":[\"13 Rue Morgue\"`\"PO3 1TP\"]}}"));" is 159.,33
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_person_as_json,Magic Number,The method contains a magic number: 39,33
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,tolerates_missing_values,Long Statement,The length of the statement "String json=Person.serialiser.toString($$(Person.name.of("Dominic")`Person.age.of(39)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP"))));" is 158.,45
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,tolerates_missing_values,Long Statement,The length of the statement "assertThat(json`equalTo("{\"name\":\"Dominic\"`\"age\":39`\"address\":{\"addressLines\":[\"13 Rue Morgue\"`\"PO3 1TP\"]}}"));" is 125.,45
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,tolerates_missing_values,Magic Number,The method contains a magic number: 39,45
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_people_as_json,Long Statement,The length of the statement "String json=ListSerialiser.writingItemsWith(Person.serialiser).toString(asList($$(Person.name.of("Dominic")`Person.age.of(39)`Person.favouriteColour.of(Color.RED)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP")))`$$(Person.name.of("Oliver")`Person.age.of(14)`Person.favouriteColour.of(Color.BLACK)`Person.address.of(Address.addressLines.of("22 Acacia Avenue"`"VB6 5UX")))));" is 395.,56
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_people_as_json,Long Statement,The length of the statement "assertThat(json`equalTo("[{\"name\":\"Dominic\"`\"age\":39`\"favourite colour\":\"0xFF0000\"`\"address\":{\"addressLines\":[\"13 Rue Morgue\"`\"PO3 1TP\"]}}`" + "{\"name\":\"Oliver\"`\"age\":14`\"favourite colour\":\"0x000000\"`\"address\":{\"addressLines\":[\"22 Acacia Avenue\"`\"VB6 5UX\"]}}]"));" is 299.,56
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_people_as_json,Magic Number,The method contains a magic number: 39,56
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_people_as_json,Magic Number,The method contains a magic number: 14,56
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Long Statement,The length of the statement "String json=ListSerialiser.writingItemsWith(MapSerialiser.writingValuesWith(ListSerialiser.writingItemsWith(toInteger))).toString(data);" is 136.,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Long Statement,The length of the statement "assertThat(json`equalTo("[{\"primes\":[1`2`3`5`7]`\"evens\":[2`4`6`8`10]}`{\"odds\":[1`3`5`7`9]`\"powers\":[2`4`8`16`32]}]"));" is 126.,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 2,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 3,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 5,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 7,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 2,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 4,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 6,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 8,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 10,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 3,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 5,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 7,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 9,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 2,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 4,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 8,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 16,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,writes_list_of_maps_of_lists_of_ints_as_json,Magic Number,The method contains a magic number: 32,75
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflective_serialisation_works_too,Long Statement,The length of the statement "Record me=$$(Person.name.of("Dominic")`Person.age.of(39)`Person.favouriteColour.of(Color.RED)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP")));" is 165.,95
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflective_serialisation_works_too,Magic Number,The method contains a magic number: 39,95
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflectively_serialise_multiple_records,Long Statement,The length of the statement "Record me=$$(Person.name.of("Dominic")`Person.age.of(39)`Person.favouriteColour.of(Color.RED)`Person.address.of(Address.addressLines.of("13 Rue Morgue"`"PO3 1TP")));" is 165.,112
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflectively_serialise_multiple_records,Long Statement,The length of the statement "Record you=$$(Person.name.of("Doppelganger")`Person.age.of(40)`Person.favouriteColour.of(Color.BLUE)`Person.address.of(Address.addressLines.of("23 Acacia Avenue"`"VB6 5UX")));" is 175.,112
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflectively_serialise_multiple_records,Magic Number,The method contains a magic number: 39,112
poetix_octarine,com.codepoetics.octarine.json,SerialisationTest,reflectively_serialise_multiple_records,Magic Number,The method contains a magic number: 40,112
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,deserialises_json_to_record,Long Statement,The length of the statement "Valid<Person> person=Person.deserialiser.validAgainst(Person.schema).fromString(String.join("\n"`"{"`" \"name\": \"Dominic\"`"`" \"age\": 39`"`" \"favourite colour\": \"0xFF0000\"`"`" \"address\": {"`" \"addressLines\": ["`" \"13 Rue Morgue\"`"`" \"PO3 1TP\""`" ]"`" }"`"}")).get();" is 282.,54
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,deserialises_json_to_record,Long Statement,The length of the statement "assertThat(person`ARecord.instance().with(Person.name`"Dominic").with(Person.age`39).with(Person.favouriteColour`Color.RED).with(Person.address.join(Address.addressLines).join(toIndex(1))`"PO3 1TP"));" is 200.,54
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,deserialises_json_to_record,Magic Number,The method contains a magic number: 39,54
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,returns_nested_validation_exceptions,Long Statement,The length of the statement "Validation<Person> personResult=Person.deserialiser.validAgainst(Person.schema).fromString(String.join("\n"`"{"`" \"name\": \"Dominic\"`"`" \"age\": 39`"`" \"favourite colour\": \"0xFF0000\"`"`" \"address\": {"`" \"addressLinez\": ["`" \"13 Rue Morgue\"`"`" \"PO3 1TP\""`" ]"`" }"`"}"));" is 287.,78
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,handles_empty_arrays,Long Statement,The length of the statement "assertThat(Address.deserialiser.fromString("{\"addressLines\":[]}")`ARecord.instance().with(Address.addressLines`isEmpty()));" is 125.,98
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,handles_arrays_of_empty_arrays,Long Statement,The length of the statement "assertThat(deserialiser.fromString("{\"emptiness\": [[]`[]`[]]}")`ARecord.instance().with(key`hasItems(isEmpty()`isEmpty()`isEmpty())));" is 136.,104
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,handles_arrays_of_objects,Long Statement,The length of the statement "assertThat(r`ARecord.instance().with(addresses.join(toIndex(0)).join(Address.addressLines).join(toIndex(0))`"line 1").with(addresses.join(toIndex(0)).join(Address.addressLines).join(toIndex(1))`"line 2").with(addresses.join(toIndex(1)).join(Address.addressLines)`isEmpty()));" is 275.,114
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,handles_arrays_of_arrays,Magic Number,The method contains a magic number: 5,127
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_list_of_records,Long Statement,The length of the statement "assertThat(numbers`AnInstance.<List<Record>>ofGeneric(List.class).with(Path.<Record>toIndex(0).join(prefix)`Present.and(equalTo("0208"))));" is 139.,138
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_an_empty_top_level_list,Magic Number,The method contains a magic number: 500,148
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,list_deserialiser_does_not_go_into_infinite_loop_with_non_list,Magic Number,The method contains a magic number: 500,157
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,list_deserialiser_does_not_go_into_infinite_loop_with_null_value_in_record,Magic Number,The method contains a magic number: 500,172
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_map_of_records,Long Statement,The length of the statement "String json="{\"home\": {\"prefix\": \"0208\"` \"number\": \"123456\"}` \"work\": {\"prefix\": \"07775\"` \"number\": \"654321\"}}";" is 132.,182
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_map_of_records,Long Statement,The length of the statement "assertThat(numbers`AnInstance.<Map<String`Record>>ofGeneric(Map.class).with(Path.<String`Record>toKey("home").join(prefix)`Present.and(equalTo("0208"))));" is 154.,182
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_map_of_maps_of_records,Long Statement,The length of the statement "String json="{\"no-one\": {}` " + "\"dominic\": {\"home\": {\"prefix\": \"0208\"` \"number\": \"123456\"}` " + "\"work\": {\"prefix\": \"07775\"` \"number\": \"654321\"}}}";" is 173.,192
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_map_of_maps_of_records,Long Statement,The length of the statement "Map<String`PMap<String`Record>> numbers=MapDeserialiser.readingValuesWith(MapDeserialiser.readingValuesWith(readNumber)).fromString(json);" is 138.,192
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_map_of_maps_of_records,Long Statement,The length of the statement "assertThat(numbers`AnInstance.<Map<String`PMap<String`Record>>>ofGeneric(Map.class).with(Path.<String`PMap<String`Record>>toKey("dominic").join(Path.<String`Record>toKey("home")).join(prefix)`Present.and(equalTo("0208"))));" is 223.,192
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_a_record_containing_a_map_of_records,Long Statement,The length of the statement "String json="{\"numbers\": {\"home\": {\"prefix\": \"0208\"` \"number\": \"123456\"}` \"work\": {\"prefix\": \"07775\"` \"number\": \"654321\"}}}";" is 147.,204
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_records_with_ignored_children,Long Statement,The length of the statement "String json=String.join("\n"`"{"`" \"id\": \"12\"`"`" \"dontcare\": {"`" \"id\": \"56\"`"`" \"name\": \"Don't want\""`" }"`"}");" is 128.,257
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_records_with_null_sub_records,Magic Number,The method contains a magic number: 500,278
poetix_octarine,com.codepoetics.octarine.json,DeserialisationTest,can_deserialise_records_with_value_after_null,Magic Number,The method contains a magic number: 500,301
